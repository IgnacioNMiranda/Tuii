Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMA

Grammar

Rule 0     S' -> ini
Rule 1     ini -> main
Rule 2     ini -> vacio
Rule 3     main -> MAIN LK sentence RK
Rule 4     main -> MAIN LK vacio RK
Rule 5     vacio -> <empty>
Rule 6     sentence -> single_stmt
Rule 7     sentence -> if_stmt
Rule 8     sentence -> sentence single_stmt
Rule 9     sentence -> sentence if_stmt
Rule 10    single_stmt -> int_decl
Rule 11    single_stmt -> single_op
Rule 12    single_stmt -> sum_function
Rule 13    single_stmt -> print
Rule 14    int_decl -> INT ID IGUAL term PC
Rule 15    term -> term operator DIGIT
Rule 16    term -> DIGIT
Rule 17    term -> term operator ID
Rule 18    term -> ID
Rule 19    term -> term operator sum_function
Rule 20    term -> sum_function
Rule 21    sum_function -> SUM LP ID RP PC
Rule 22    operator -> MAS
Rule 23    operator -> MENOS
Rule 24    operator -> MUL
Rule 25    operator -> DIV
Rule 26    single_op -> ID IGUAL term PC
Rule 27    print -> PRINT LP ID RP PC
Rule 28    print -> PRINT LP TEXT RP PC
Rule 29    if_stmt -> IF LP ID RP LK sentence RK
Rule 30    if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK

Terminals, with rules where they appear

COMA                 : 
DIGIT                : 15 16
DIV                  : 25
ELSE                 : 30
ID                   : 14 17 18 21 26 27 29 30
IF                   : 29 30
IGUAL                : 14 26
INT                  : 14
LK                   : 3 4 29 30 30
LP                   : 21 27 28 29 30
MAIN                 : 3 4
MAS                  : 22
MENOS                : 23
MUL                  : 24
PC                   : 14 21 26 27 28
PRINT                : 27 28
RK                   : 3 4 29 30 30
RP                   : 21 27 28 29 30
SUM                  : 21
TEXT                 : 28
error                : 

Nonterminals, with rules where they appear

if_stmt              : 7 9
ini                  : 0
int_decl             : 10
main                 : 1
operator             : 15 17 19
print                : 13
sentence             : 3 8 9 29 30 30
single_op            : 11
single_stmt          : 6 8
sum_function         : 12 19 20
term                 : 14 15 17 19 26
vacio                : 2 4

Parsing method: LALR

state 0

    (0) S' -> . ini
    (1) ini -> . main
    (2) ini -> . vacio
    (3) main -> . MAIN LK sentence RK
    (4) main -> . MAIN LK vacio RK
    (5) vacio -> .

    MAIN            shift and go to state 4
    $end            reduce using rule 5 (vacio -> .)

    ini                            shift and go to state 1
    main                           shift and go to state 2
    vacio                          shift and go to state 3

state 1

    (0) S' -> ini .



state 2

    (1) ini -> main .

    $end            reduce using rule 1 (ini -> main .)


state 3

    (2) ini -> vacio .

    $end            reduce using rule 2 (ini -> vacio .)


state 4

    (3) main -> MAIN . LK sentence RK
    (4) main -> MAIN . LK vacio RK

    LK              shift and go to state 5


state 5

    (3) main -> MAIN LK . sentence RK
    (4) main -> MAIN LK . vacio RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (5) vacio -> .
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . ID IGUAL term PC
    (21) sum_function -> . SUM LP ID RP PC
    (27) print -> . PRINT LP ID RP PC
    (28) print -> . PRINT LP TEXT RP PC

    RK              reduce using rule 5 (vacio -> .)
    IF              shift and go to state 14
    INT             shift and go to state 16
    ID              shift and go to state 15
    SUM             shift and go to state 17
    PRINT           shift and go to state 18

    sentence                       shift and go to state 6
    vacio                          shift and go to state 7
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13

state 6

    (3) main -> MAIN LK sentence . RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . ID IGUAL term PC
    (21) sum_function -> . SUM LP ID RP PC
    (27) print -> . PRINT LP ID RP PC
    (28) print -> . PRINT LP TEXT RP PC

    RK              shift and go to state 19
    IF              shift and go to state 14
    INT             shift and go to state 16
    ID              shift and go to state 15
    SUM             shift and go to state 17
    PRINT           shift and go to state 18

    single_stmt                    shift and go to state 20
    if_stmt                        shift and go to state 21
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13

state 7

    (4) main -> MAIN LK vacio . RK

    RK              shift and go to state 22


state 8

    (6) sentence -> single_stmt .

    RK              reduce using rule 6 (sentence -> single_stmt .)
    IF              reduce using rule 6 (sentence -> single_stmt .)
    INT             reduce using rule 6 (sentence -> single_stmt .)
    ID              reduce using rule 6 (sentence -> single_stmt .)
    SUM             reduce using rule 6 (sentence -> single_stmt .)
    PRINT           reduce using rule 6 (sentence -> single_stmt .)


state 9

    (7) sentence -> if_stmt .

    RK              reduce using rule 7 (sentence -> if_stmt .)
    IF              reduce using rule 7 (sentence -> if_stmt .)
    INT             reduce using rule 7 (sentence -> if_stmt .)
    ID              reduce using rule 7 (sentence -> if_stmt .)
    SUM             reduce using rule 7 (sentence -> if_stmt .)
    PRINT           reduce using rule 7 (sentence -> if_stmt .)


state 10

    (10) single_stmt -> int_decl .

    RK              reduce using rule 10 (single_stmt -> int_decl .)
    IF              reduce using rule 10 (single_stmt -> int_decl .)
    INT             reduce using rule 10 (single_stmt -> int_decl .)
    ID              reduce using rule 10 (single_stmt -> int_decl .)
    SUM             reduce using rule 10 (single_stmt -> int_decl .)
    PRINT           reduce using rule 10 (single_stmt -> int_decl .)


state 11

    (11) single_stmt -> single_op .

    RK              reduce using rule 11 (single_stmt -> single_op .)
    IF              reduce using rule 11 (single_stmt -> single_op .)
    INT             reduce using rule 11 (single_stmt -> single_op .)
    ID              reduce using rule 11 (single_stmt -> single_op .)
    SUM             reduce using rule 11 (single_stmt -> single_op .)
    PRINT           reduce using rule 11 (single_stmt -> single_op .)


state 12

    (12) single_stmt -> sum_function .

    RK              reduce using rule 12 (single_stmt -> sum_function .)
    IF              reduce using rule 12 (single_stmt -> sum_function .)
    INT             reduce using rule 12 (single_stmt -> sum_function .)
    ID              reduce using rule 12 (single_stmt -> sum_function .)
    SUM             reduce using rule 12 (single_stmt -> sum_function .)
    PRINT           reduce using rule 12 (single_stmt -> sum_function .)


state 13

    (13) single_stmt -> print .

    RK              reduce using rule 13 (single_stmt -> print .)
    IF              reduce using rule 13 (single_stmt -> print .)
    INT             reduce using rule 13 (single_stmt -> print .)
    ID              reduce using rule 13 (single_stmt -> print .)
    SUM             reduce using rule 13 (single_stmt -> print .)
    PRINT           reduce using rule 13 (single_stmt -> print .)


state 14

    (29) if_stmt -> IF . LP ID RP LK sentence RK
    (30) if_stmt -> IF . LP ID RP LK sentence RK ELSE LK sentence RK

    LP              shift and go to state 23


state 15

    (26) single_op -> ID . IGUAL term PC

    IGUAL           shift and go to state 24


state 16

    (14) int_decl -> INT . ID IGUAL term PC

    ID              shift and go to state 25


state 17

    (21) sum_function -> SUM . LP ID RP PC

    LP              shift and go to state 26


state 18

    (27) print -> PRINT . LP ID RP PC
    (28) print -> PRINT . LP TEXT RP PC

    LP              shift and go to state 27


state 19

    (3) main -> MAIN LK sentence RK .

    $end            reduce using rule 3 (main -> MAIN LK sentence RK .)


state 20

    (8) sentence -> sentence single_stmt .

    RK              reduce using rule 8 (sentence -> sentence single_stmt .)
    IF              reduce using rule 8 (sentence -> sentence single_stmt .)
    INT             reduce using rule 8 (sentence -> sentence single_stmt .)
    ID              reduce using rule 8 (sentence -> sentence single_stmt .)
    SUM             reduce using rule 8 (sentence -> sentence single_stmt .)
    PRINT           reduce using rule 8 (sentence -> sentence single_stmt .)


state 21

    (9) sentence -> sentence if_stmt .

    RK              reduce using rule 9 (sentence -> sentence if_stmt .)
    IF              reduce using rule 9 (sentence -> sentence if_stmt .)
    INT             reduce using rule 9 (sentence -> sentence if_stmt .)
    ID              reduce using rule 9 (sentence -> sentence if_stmt .)
    SUM             reduce using rule 9 (sentence -> sentence if_stmt .)
    PRINT           reduce using rule 9 (sentence -> sentence if_stmt .)


state 22

    (4) main -> MAIN LK vacio RK .

    $end            reduce using rule 4 (main -> MAIN LK vacio RK .)


state 23

    (29) if_stmt -> IF LP . ID RP LK sentence RK
    (30) if_stmt -> IF LP . ID RP LK sentence RK ELSE LK sentence RK

    ID              shift and go to state 28


state 24

    (26) single_op -> ID IGUAL . term PC
    (15) term -> . term operator DIGIT
    (16) term -> . DIGIT
    (17) term -> . term operator ID
    (18) term -> . ID
    (19) term -> . term operator sum_function
    (20) term -> . sum_function
    (21) sum_function -> . SUM LP ID RP PC

    DIGIT           shift and go to state 31
    ID              shift and go to state 29
    SUM             shift and go to state 17

    term                           shift and go to state 30
    sum_function                   shift and go to state 32

state 25

    (14) int_decl -> INT ID . IGUAL term PC

    IGUAL           shift and go to state 33


state 26

    (21) sum_function -> SUM LP . ID RP PC

    ID              shift and go to state 34


state 27

    (27) print -> PRINT LP . ID RP PC
    (28) print -> PRINT LP . TEXT RP PC

    ID              shift and go to state 35
    TEXT            shift and go to state 36


state 28

    (29) if_stmt -> IF LP ID . RP LK sentence RK
    (30) if_stmt -> IF LP ID . RP LK sentence RK ELSE LK sentence RK

    RP              shift and go to state 37


state 29

    (18) term -> ID .

    PC              reduce using rule 18 (term -> ID .)
    MAS             reduce using rule 18 (term -> ID .)
    MENOS           reduce using rule 18 (term -> ID .)
    MUL             reduce using rule 18 (term -> ID .)
    DIV             reduce using rule 18 (term -> ID .)


state 30

    (26) single_op -> ID IGUAL term . PC
    (15) term -> term . operator DIGIT
    (17) term -> term . operator ID
    (19) term -> term . operator sum_function
    (22) operator -> . MAS
    (23) operator -> . MENOS
    (24) operator -> . MUL
    (25) operator -> . DIV

    PC              shift and go to state 38
    MAS             shift and go to state 40
    MENOS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43

    operator                       shift and go to state 39

state 31

    (16) term -> DIGIT .

    PC              reduce using rule 16 (term -> DIGIT .)
    MAS             reduce using rule 16 (term -> DIGIT .)
    MENOS           reduce using rule 16 (term -> DIGIT .)
    MUL             reduce using rule 16 (term -> DIGIT .)
    DIV             reduce using rule 16 (term -> DIGIT .)


state 32

    (20) term -> sum_function .

    PC              reduce using rule 20 (term -> sum_function .)
    MAS             reduce using rule 20 (term -> sum_function .)
    MENOS           reduce using rule 20 (term -> sum_function .)
    MUL             reduce using rule 20 (term -> sum_function .)
    DIV             reduce using rule 20 (term -> sum_function .)


state 33

    (14) int_decl -> INT ID IGUAL . term PC
    (15) term -> . term operator DIGIT
    (16) term -> . DIGIT
    (17) term -> . term operator ID
    (18) term -> . ID
    (19) term -> . term operator sum_function
    (20) term -> . sum_function
    (21) sum_function -> . SUM LP ID RP PC

    DIGIT           shift and go to state 31
    ID              shift and go to state 29
    SUM             shift and go to state 17

    term                           shift and go to state 44
    sum_function                   shift and go to state 32

state 34

    (21) sum_function -> SUM LP ID . RP PC

    RP              shift and go to state 45


state 35

    (27) print -> PRINT LP ID . RP PC

    RP              shift and go to state 46


state 36

    (28) print -> PRINT LP TEXT . RP PC

    RP              shift and go to state 47


state 37

    (29) if_stmt -> IF LP ID RP . LK sentence RK
    (30) if_stmt -> IF LP ID RP . LK sentence RK ELSE LK sentence RK

    LK              shift and go to state 48


state 38

    (26) single_op -> ID IGUAL term PC .

    RK              reduce using rule 26 (single_op -> ID IGUAL term PC .)
    IF              reduce using rule 26 (single_op -> ID IGUAL term PC .)
    INT             reduce using rule 26 (single_op -> ID IGUAL term PC .)
    ID              reduce using rule 26 (single_op -> ID IGUAL term PC .)
    SUM             reduce using rule 26 (single_op -> ID IGUAL term PC .)
    PRINT           reduce using rule 26 (single_op -> ID IGUAL term PC .)


state 39

    (15) term -> term operator . DIGIT
    (17) term -> term operator . ID
    (19) term -> term operator . sum_function
    (21) sum_function -> . SUM LP ID RP PC

    DIGIT           shift and go to state 49
    ID              shift and go to state 50
    SUM             shift and go to state 17

    sum_function                   shift and go to state 51

state 40

    (22) operator -> MAS .

    DIGIT           reduce using rule 22 (operator -> MAS .)
    ID              reduce using rule 22 (operator -> MAS .)
    SUM             reduce using rule 22 (operator -> MAS .)


state 41

    (23) operator -> MENOS .

    DIGIT           reduce using rule 23 (operator -> MENOS .)
    ID              reduce using rule 23 (operator -> MENOS .)
    SUM             reduce using rule 23 (operator -> MENOS .)


state 42

    (24) operator -> MUL .

    DIGIT           reduce using rule 24 (operator -> MUL .)
    ID              reduce using rule 24 (operator -> MUL .)
    SUM             reduce using rule 24 (operator -> MUL .)


state 43

    (25) operator -> DIV .

    DIGIT           reduce using rule 25 (operator -> DIV .)
    ID              reduce using rule 25 (operator -> DIV .)
    SUM             reduce using rule 25 (operator -> DIV .)


state 44

    (14) int_decl -> INT ID IGUAL term . PC
    (15) term -> term . operator DIGIT
    (17) term -> term . operator ID
    (19) term -> term . operator sum_function
    (22) operator -> . MAS
    (23) operator -> . MENOS
    (24) operator -> . MUL
    (25) operator -> . DIV

    PC              shift and go to state 52
    MAS             shift and go to state 40
    MENOS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43

    operator                       shift and go to state 39

state 45

    (21) sum_function -> SUM LP ID RP . PC

    PC              shift and go to state 53


state 46

    (27) print -> PRINT LP ID RP . PC

    PC              shift and go to state 54


state 47

    (28) print -> PRINT LP TEXT RP . PC

    PC              shift and go to state 55


state 48

    (29) if_stmt -> IF LP ID RP LK . sentence RK
    (30) if_stmt -> IF LP ID RP LK . sentence RK ELSE LK sentence RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . ID IGUAL term PC
    (21) sum_function -> . SUM LP ID RP PC
    (27) print -> . PRINT LP ID RP PC
    (28) print -> . PRINT LP TEXT RP PC

    IF              shift and go to state 14
    INT             shift and go to state 16
    ID              shift and go to state 15
    SUM             shift and go to state 17
    PRINT           shift and go to state 18

    sentence                       shift and go to state 56
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13

state 49

    (15) term -> term operator DIGIT .

    PC              reduce using rule 15 (term -> term operator DIGIT .)
    MAS             reduce using rule 15 (term -> term operator DIGIT .)
    MENOS           reduce using rule 15 (term -> term operator DIGIT .)
    MUL             reduce using rule 15 (term -> term operator DIGIT .)
    DIV             reduce using rule 15 (term -> term operator DIGIT .)


state 50

    (17) term -> term operator ID .

    PC              reduce using rule 17 (term -> term operator ID .)
    MAS             reduce using rule 17 (term -> term operator ID .)
    MENOS           reduce using rule 17 (term -> term operator ID .)
    MUL             reduce using rule 17 (term -> term operator ID .)
    DIV             reduce using rule 17 (term -> term operator ID .)


state 51

    (19) term -> term operator sum_function .

    PC              reduce using rule 19 (term -> term operator sum_function .)
    MAS             reduce using rule 19 (term -> term operator sum_function .)
    MENOS           reduce using rule 19 (term -> term operator sum_function .)
    MUL             reduce using rule 19 (term -> term operator sum_function .)
    DIV             reduce using rule 19 (term -> term operator sum_function .)


state 52

    (14) int_decl -> INT ID IGUAL term PC .

    RK              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    IF              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    INT             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    ID              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    SUM             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    PRINT           reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)


state 53

    (21) sum_function -> SUM LP ID RP PC .

    RK              reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    IF              reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    INT             reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    ID              reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    SUM             reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    PRINT           reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    PC              reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    MAS             reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    MENOS           reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    MUL             reduce using rule 21 (sum_function -> SUM LP ID RP PC .)
    DIV             reduce using rule 21 (sum_function -> SUM LP ID RP PC .)


state 54

    (27) print -> PRINT LP ID RP PC .

    RK              reduce using rule 27 (print -> PRINT LP ID RP PC .)
    IF              reduce using rule 27 (print -> PRINT LP ID RP PC .)
    INT             reduce using rule 27 (print -> PRINT LP ID RP PC .)
    ID              reduce using rule 27 (print -> PRINT LP ID RP PC .)
    SUM             reduce using rule 27 (print -> PRINT LP ID RP PC .)
    PRINT           reduce using rule 27 (print -> PRINT LP ID RP PC .)


state 55

    (28) print -> PRINT LP TEXT RP PC .

    RK              reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    IF              reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    INT             reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    ID              reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    SUM             reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    PRINT           reduce using rule 28 (print -> PRINT LP TEXT RP PC .)


state 56

    (29) if_stmt -> IF LP ID RP LK sentence . RK
    (30) if_stmt -> IF LP ID RP LK sentence . RK ELSE LK sentence RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . ID IGUAL term PC
    (21) sum_function -> . SUM LP ID RP PC
    (27) print -> . PRINT LP ID RP PC
    (28) print -> . PRINT LP TEXT RP PC

    RK              shift and go to state 57
    IF              shift and go to state 14
    INT             shift and go to state 16
    ID              shift and go to state 15
    SUM             shift and go to state 17
    PRINT           shift and go to state 18

    single_stmt                    shift and go to state 20
    if_stmt                        shift and go to state 21
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13

state 57

    (29) if_stmt -> IF LP ID RP LK sentence RK .
    (30) if_stmt -> IF LP ID RP LK sentence RK . ELSE LK sentence RK

    RK              reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    IF              reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    INT             reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    ID              reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    SUM             reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    PRINT           reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    ELSE            shift and go to state 58


state 58

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE . LK sentence RK

    LK              shift and go to state 59


state 59

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE LK . sentence RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . ID IGUAL term PC
    (21) sum_function -> . SUM LP ID RP PC
    (27) print -> . PRINT LP ID RP PC
    (28) print -> . PRINT LP TEXT RP PC

    IF              shift and go to state 14
    INT             shift and go to state 16
    ID              shift and go to state 15
    SUM             shift and go to state 17
    PRINT           shift and go to state 18

    sentence                       shift and go to state 60
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13

state 60

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence . RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . ID IGUAL term PC
    (21) sum_function -> . SUM LP ID RP PC
    (27) print -> . PRINT LP ID RP PC
    (28) print -> . PRINT LP TEXT RP PC

    RK              shift and go to state 61
    IF              shift and go to state 14
    INT             shift and go to state 16
    ID              shift and go to state 15
    SUM             shift and go to state 17
    PRINT           shift and go to state 18

    single_stmt                    shift and go to state 20
    if_stmt                        shift and go to state 21
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13

state 61

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .

    RK              reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    IF              reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    INT             reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    ID              reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    SUM             reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    PRINT           reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)

