Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMA

Grammar

Rule 0     S' -> ini
Rule 1     ini -> main
Rule 2     ini -> vacio
Rule 3     main -> MAIN LK sentence RK
Rule 4     main -> MAIN LK vacio RK
Rule 5     vacio -> <empty>
Rule 6     sentence -> single_stmt
Rule 7     sentence -> if_stmt
Rule 8     sentence -> sentence single_stmt
Rule 9     sentence -> sentence if_stmt
Rule 10    single_stmt -> int_decl
Rule 11    single_stmt -> single_op
Rule 12    single_stmt -> sum_function
Rule 13    single_stmt -> print
Rule 14    int_decl -> INT ID IGUAL term PC
Rule 15    term -> term operator DIGIT
Rule 16    term -> DIGIT
Rule 17    term -> term operator id
Rule 18    term -> id
Rule 19    term -> term operator sum_function
Rule 20    term -> sum_function
Rule 21    sum_function -> SUM LP id RP PC
Rule 22    operator -> MAS
Rule 23    operator -> MENOS
Rule 24    operator -> MUL
Rule 25    operator -> DIV
Rule 26    single_op -> id IGUAL term PC
Rule 27    print -> PRINT LP id RP PC
Rule 28    print -> PRINT LP TEXT RP PC
Rule 29    if_stmt -> IF LP ID RP LK sentence RK
Rule 30    if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK
Rule 31    id -> ID

Terminals, with rules where they appear

COMA                 : 
DIGIT                : 15 16
DIV                  : 25
ELSE                 : 30
ID                   : 14 29 30 31
IF                   : 29 30
IGUAL                : 14 26
INT                  : 14
LK                   : 3 4 29 30 30
LP                   : 21 27 28 29 30
MAIN                 : 3 4
MAS                  : 22
MENOS                : 23
MUL                  : 24
PC                   : 14 21 26 27 28
PRINT                : 27 28
RK                   : 3 4 29 30 30
RP                   : 21 27 28 29 30
SUM                  : 21
TEXT                 : 28
error                : 

Nonterminals, with rules where they appear

id                   : 17 18 21 26 27
if_stmt              : 7 9
ini                  : 0
int_decl             : 10
main                 : 1
operator             : 15 17 19
print                : 13
sentence             : 3 8 9 29 30 30
single_op            : 11
single_stmt          : 6 8
sum_function         : 12 19 20
term                 : 14 15 17 19 26
vacio                : 2 4

Parsing method: LALR

state 0

    (0) S' -> . ini
    (1) ini -> . main
    (2) ini -> . vacio
    (3) main -> . MAIN LK sentence RK
    (4) main -> . MAIN LK vacio RK
    (5) vacio -> .

    MAIN            shift and go to state 4
    $end            reduce using rule 5 (vacio -> .)

    ini                            shift and go to state 1
    main                           shift and go to state 2
    vacio                          shift and go to state 3

state 1

    (0) S' -> ini .



state 2

    (1) ini -> main .

    $end            reduce using rule 1 (ini -> main .)


state 3

    (2) ini -> vacio .

    $end            reduce using rule 2 (ini -> vacio .)


state 4

    (3) main -> MAIN . LK sentence RK
    (4) main -> MAIN . LK vacio RK

    LK              shift and go to state 5


state 5

    (3) main -> MAIN LK . sentence RK
    (4) main -> MAIN LK . vacio RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (5) vacio -> .
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . id IGUAL term PC
    (21) sum_function -> . SUM LP id RP PC
    (27) print -> . PRINT LP id RP PC
    (28) print -> . PRINT LP TEXT RP PC
    (31) id -> . ID

    RK              reduce using rule 5 (vacio -> .)
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    sentence                       shift and go to state 6
    vacio                          shift and go to state 7
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 6

    (3) main -> MAIN LK sentence . RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . id IGUAL term PC
    (21) sum_function -> . SUM LP id RP PC
    (27) print -> . PRINT LP id RP PC
    (28) print -> . PRINT LP TEXT RP PC
    (31) id -> . ID

    RK              shift and go to state 20
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    single_stmt                    shift and go to state 21
    if_stmt                        shift and go to state 22
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 7

    (4) main -> MAIN LK vacio . RK

    RK              shift and go to state 23


state 8

    (6) sentence -> single_stmt .

    RK              reduce using rule 6 (sentence -> single_stmt .)
    IF              reduce using rule 6 (sentence -> single_stmt .)
    INT             reduce using rule 6 (sentence -> single_stmt .)
    SUM             reduce using rule 6 (sentence -> single_stmt .)
    PRINT           reduce using rule 6 (sentence -> single_stmt .)
    ID              reduce using rule 6 (sentence -> single_stmt .)


state 9

    (7) sentence -> if_stmt .

    RK              reduce using rule 7 (sentence -> if_stmt .)
    IF              reduce using rule 7 (sentence -> if_stmt .)
    INT             reduce using rule 7 (sentence -> if_stmt .)
    SUM             reduce using rule 7 (sentence -> if_stmt .)
    PRINT           reduce using rule 7 (sentence -> if_stmt .)
    ID              reduce using rule 7 (sentence -> if_stmt .)


state 10

    (10) single_stmt -> int_decl .

    RK              reduce using rule 10 (single_stmt -> int_decl .)
    IF              reduce using rule 10 (single_stmt -> int_decl .)
    INT             reduce using rule 10 (single_stmt -> int_decl .)
    SUM             reduce using rule 10 (single_stmt -> int_decl .)
    PRINT           reduce using rule 10 (single_stmt -> int_decl .)
    ID              reduce using rule 10 (single_stmt -> int_decl .)


state 11

    (11) single_stmt -> single_op .

    RK              reduce using rule 11 (single_stmt -> single_op .)
    IF              reduce using rule 11 (single_stmt -> single_op .)
    INT             reduce using rule 11 (single_stmt -> single_op .)
    SUM             reduce using rule 11 (single_stmt -> single_op .)
    PRINT           reduce using rule 11 (single_stmt -> single_op .)
    ID              reduce using rule 11 (single_stmt -> single_op .)


state 12

    (12) single_stmt -> sum_function .

    RK              reduce using rule 12 (single_stmt -> sum_function .)
    IF              reduce using rule 12 (single_stmt -> sum_function .)
    INT             reduce using rule 12 (single_stmt -> sum_function .)
    SUM             reduce using rule 12 (single_stmt -> sum_function .)
    PRINT           reduce using rule 12 (single_stmt -> sum_function .)
    ID              reduce using rule 12 (single_stmt -> sum_function .)


state 13

    (13) single_stmt -> print .

    RK              reduce using rule 13 (single_stmt -> print .)
    IF              reduce using rule 13 (single_stmt -> print .)
    INT             reduce using rule 13 (single_stmt -> print .)
    SUM             reduce using rule 13 (single_stmt -> print .)
    PRINT           reduce using rule 13 (single_stmt -> print .)
    ID              reduce using rule 13 (single_stmt -> print .)


state 14

    (29) if_stmt -> IF . LP ID RP LK sentence RK
    (30) if_stmt -> IF . LP ID RP LK sentence RK ELSE LK sentence RK

    LP              shift and go to state 24


state 15

    (31) id -> ID .

    IGUAL           reduce using rule 31 (id -> ID .)
    PC              reduce using rule 31 (id -> ID .)
    MAS             reduce using rule 31 (id -> ID .)
    MENOS           reduce using rule 31 (id -> ID .)
    MUL             reduce using rule 31 (id -> ID .)
    DIV             reduce using rule 31 (id -> ID .)
    RP              reduce using rule 31 (id -> ID .)


state 16

    (14) int_decl -> INT . ID IGUAL term PC

    ID              shift and go to state 25


state 17

    (26) single_op -> id . IGUAL term PC

    IGUAL           shift and go to state 26


state 18

    (21) sum_function -> SUM . LP id RP PC

    LP              shift and go to state 27


state 19

    (27) print -> PRINT . LP id RP PC
    (28) print -> PRINT . LP TEXT RP PC

    LP              shift and go to state 28


state 20

    (3) main -> MAIN LK sentence RK .

    $end            reduce using rule 3 (main -> MAIN LK sentence RK .)


state 21

    (8) sentence -> sentence single_stmt .

    RK              reduce using rule 8 (sentence -> sentence single_stmt .)
    IF              reduce using rule 8 (sentence -> sentence single_stmt .)
    INT             reduce using rule 8 (sentence -> sentence single_stmt .)
    SUM             reduce using rule 8 (sentence -> sentence single_stmt .)
    PRINT           reduce using rule 8 (sentence -> sentence single_stmt .)
    ID              reduce using rule 8 (sentence -> sentence single_stmt .)


state 22

    (9) sentence -> sentence if_stmt .

    RK              reduce using rule 9 (sentence -> sentence if_stmt .)
    IF              reduce using rule 9 (sentence -> sentence if_stmt .)
    INT             reduce using rule 9 (sentence -> sentence if_stmt .)
    SUM             reduce using rule 9 (sentence -> sentence if_stmt .)
    PRINT           reduce using rule 9 (sentence -> sentence if_stmt .)
    ID              reduce using rule 9 (sentence -> sentence if_stmt .)


state 23

    (4) main -> MAIN LK vacio RK .

    $end            reduce using rule 4 (main -> MAIN LK vacio RK .)


state 24

    (29) if_stmt -> IF LP . ID RP LK sentence RK
    (30) if_stmt -> IF LP . ID RP LK sentence RK ELSE LK sentence RK

    ID              shift and go to state 29


state 25

    (14) int_decl -> INT ID . IGUAL term PC

    IGUAL           shift and go to state 30


state 26

    (26) single_op -> id IGUAL . term PC
    (15) term -> . term operator DIGIT
    (16) term -> . DIGIT
    (17) term -> . term operator id
    (18) term -> . id
    (19) term -> . term operator sum_function
    (20) term -> . sum_function
    (31) id -> . ID
    (21) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 33
    ID              shift and go to state 15
    SUM             shift and go to state 18

    id                             shift and go to state 31
    term                           shift and go to state 32
    sum_function                   shift and go to state 34

state 27

    (21) sum_function -> SUM LP . id RP PC
    (31) id -> . ID

    ID              shift and go to state 15

    id                             shift and go to state 35

state 28

    (27) print -> PRINT LP . id RP PC
    (28) print -> PRINT LP . TEXT RP PC
    (31) id -> . ID

    TEXT            shift and go to state 37
    ID              shift and go to state 15

    id                             shift and go to state 36

state 29

    (29) if_stmt -> IF LP ID . RP LK sentence RK
    (30) if_stmt -> IF LP ID . RP LK sentence RK ELSE LK sentence RK

    RP              shift and go to state 38


state 30

    (14) int_decl -> INT ID IGUAL . term PC
    (15) term -> . term operator DIGIT
    (16) term -> . DIGIT
    (17) term -> . term operator id
    (18) term -> . id
    (19) term -> . term operator sum_function
    (20) term -> . sum_function
    (31) id -> . ID
    (21) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 33
    ID              shift and go to state 15
    SUM             shift and go to state 18

    term                           shift and go to state 39
    id                             shift and go to state 31
    sum_function                   shift and go to state 34

state 31

    (18) term -> id .

    PC              reduce using rule 18 (term -> id .)
    MAS             reduce using rule 18 (term -> id .)
    MENOS           reduce using rule 18 (term -> id .)
    MUL             reduce using rule 18 (term -> id .)
    DIV             reduce using rule 18 (term -> id .)


state 32

    (26) single_op -> id IGUAL term . PC
    (15) term -> term . operator DIGIT
    (17) term -> term . operator id
    (19) term -> term . operator sum_function
    (22) operator -> . MAS
    (23) operator -> . MENOS
    (24) operator -> . MUL
    (25) operator -> . DIV

    PC              shift and go to state 40
    MAS             shift and go to state 42
    MENOS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45

    operator                       shift and go to state 41

state 33

    (16) term -> DIGIT .

    PC              reduce using rule 16 (term -> DIGIT .)
    MAS             reduce using rule 16 (term -> DIGIT .)
    MENOS           reduce using rule 16 (term -> DIGIT .)
    MUL             reduce using rule 16 (term -> DIGIT .)
    DIV             reduce using rule 16 (term -> DIGIT .)


state 34

    (20) term -> sum_function .

    PC              reduce using rule 20 (term -> sum_function .)
    MAS             reduce using rule 20 (term -> sum_function .)
    MENOS           reduce using rule 20 (term -> sum_function .)
    MUL             reduce using rule 20 (term -> sum_function .)
    DIV             reduce using rule 20 (term -> sum_function .)


state 35

    (21) sum_function -> SUM LP id . RP PC

    RP              shift and go to state 46


state 36

    (27) print -> PRINT LP id . RP PC

    RP              shift and go to state 47


state 37

    (28) print -> PRINT LP TEXT . RP PC

    RP              shift and go to state 48


state 38

    (29) if_stmt -> IF LP ID RP . LK sentence RK
    (30) if_stmt -> IF LP ID RP . LK sentence RK ELSE LK sentence RK

    LK              shift and go to state 49


state 39

    (14) int_decl -> INT ID IGUAL term . PC
    (15) term -> term . operator DIGIT
    (17) term -> term . operator id
    (19) term -> term . operator sum_function
    (22) operator -> . MAS
    (23) operator -> . MENOS
    (24) operator -> . MUL
    (25) operator -> . DIV

    PC              shift and go to state 50
    MAS             shift and go to state 42
    MENOS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45

    operator                       shift and go to state 41

state 40

    (26) single_op -> id IGUAL term PC .

    RK              reduce using rule 26 (single_op -> id IGUAL term PC .)
    IF              reduce using rule 26 (single_op -> id IGUAL term PC .)
    INT             reduce using rule 26 (single_op -> id IGUAL term PC .)
    SUM             reduce using rule 26 (single_op -> id IGUAL term PC .)
    PRINT           reduce using rule 26 (single_op -> id IGUAL term PC .)
    ID              reduce using rule 26 (single_op -> id IGUAL term PC .)


state 41

    (15) term -> term operator . DIGIT
    (17) term -> term operator . id
    (19) term -> term operator . sum_function
    (31) id -> . ID
    (21) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 51
    ID              shift and go to state 15
    SUM             shift and go to state 18

    id                             shift and go to state 52
    sum_function                   shift and go to state 53

state 42

    (22) operator -> MAS .

    DIGIT           reduce using rule 22 (operator -> MAS .)
    ID              reduce using rule 22 (operator -> MAS .)
    SUM             reduce using rule 22 (operator -> MAS .)


state 43

    (23) operator -> MENOS .

    DIGIT           reduce using rule 23 (operator -> MENOS .)
    ID              reduce using rule 23 (operator -> MENOS .)
    SUM             reduce using rule 23 (operator -> MENOS .)


state 44

    (24) operator -> MUL .

    DIGIT           reduce using rule 24 (operator -> MUL .)
    ID              reduce using rule 24 (operator -> MUL .)
    SUM             reduce using rule 24 (operator -> MUL .)


state 45

    (25) operator -> DIV .

    DIGIT           reduce using rule 25 (operator -> DIV .)
    ID              reduce using rule 25 (operator -> DIV .)
    SUM             reduce using rule 25 (operator -> DIV .)


state 46

    (21) sum_function -> SUM LP id RP . PC

    PC              shift and go to state 54


state 47

    (27) print -> PRINT LP id RP . PC

    PC              shift and go to state 55


state 48

    (28) print -> PRINT LP TEXT RP . PC

    PC              shift and go to state 56


state 49

    (29) if_stmt -> IF LP ID RP LK . sentence RK
    (30) if_stmt -> IF LP ID RP LK . sentence RK ELSE LK sentence RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . id IGUAL term PC
    (21) sum_function -> . SUM LP id RP PC
    (27) print -> . PRINT LP id RP PC
    (28) print -> . PRINT LP TEXT RP PC
    (31) id -> . ID

    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    sentence                       shift and go to state 57
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 50

    (14) int_decl -> INT ID IGUAL term PC .

    RK              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    IF              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    INT             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    SUM             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    PRINT           reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    ID              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)


state 51

    (15) term -> term operator DIGIT .

    PC              reduce using rule 15 (term -> term operator DIGIT .)
    MAS             reduce using rule 15 (term -> term operator DIGIT .)
    MENOS           reduce using rule 15 (term -> term operator DIGIT .)
    MUL             reduce using rule 15 (term -> term operator DIGIT .)
    DIV             reduce using rule 15 (term -> term operator DIGIT .)


state 52

    (17) term -> term operator id .

    PC              reduce using rule 17 (term -> term operator id .)
    MAS             reduce using rule 17 (term -> term operator id .)
    MENOS           reduce using rule 17 (term -> term operator id .)
    MUL             reduce using rule 17 (term -> term operator id .)
    DIV             reduce using rule 17 (term -> term operator id .)


state 53

    (19) term -> term operator sum_function .

    PC              reduce using rule 19 (term -> term operator sum_function .)
    MAS             reduce using rule 19 (term -> term operator sum_function .)
    MENOS           reduce using rule 19 (term -> term operator sum_function .)
    MUL             reduce using rule 19 (term -> term operator sum_function .)
    DIV             reduce using rule 19 (term -> term operator sum_function .)


state 54

    (21) sum_function -> SUM LP id RP PC .

    RK              reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    IF              reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    INT             reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    SUM             reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    PRINT           reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    ID              reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    PC              reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    MAS             reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    MENOS           reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    MUL             reduce using rule 21 (sum_function -> SUM LP id RP PC .)
    DIV             reduce using rule 21 (sum_function -> SUM LP id RP PC .)


state 55

    (27) print -> PRINT LP id RP PC .

    RK              reduce using rule 27 (print -> PRINT LP id RP PC .)
    IF              reduce using rule 27 (print -> PRINT LP id RP PC .)
    INT             reduce using rule 27 (print -> PRINT LP id RP PC .)
    SUM             reduce using rule 27 (print -> PRINT LP id RP PC .)
    PRINT           reduce using rule 27 (print -> PRINT LP id RP PC .)
    ID              reduce using rule 27 (print -> PRINT LP id RP PC .)


state 56

    (28) print -> PRINT LP TEXT RP PC .

    RK              reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    IF              reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    INT             reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    SUM             reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    PRINT           reduce using rule 28 (print -> PRINT LP TEXT RP PC .)
    ID              reduce using rule 28 (print -> PRINT LP TEXT RP PC .)


state 57

    (29) if_stmt -> IF LP ID RP LK sentence . RK
    (30) if_stmt -> IF LP ID RP LK sentence . RK ELSE LK sentence RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . id IGUAL term PC
    (21) sum_function -> . SUM LP id RP PC
    (27) print -> . PRINT LP id RP PC
    (28) print -> . PRINT LP TEXT RP PC
    (31) id -> . ID

    RK              shift and go to state 58
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    single_stmt                    shift and go to state 21
    if_stmt                        shift and go to state 22
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 58

    (29) if_stmt -> IF LP ID RP LK sentence RK .
    (30) if_stmt -> IF LP ID RP LK sentence RK . ELSE LK sentence RK

    RK              reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    IF              reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    INT             reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    SUM             reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    PRINT           reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    ID              reduce using rule 29 (if_stmt -> IF LP ID RP LK sentence RK .)
    ELSE            shift and go to state 59


state 59

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE . LK sentence RK

    LK              shift and go to state 60


state 60

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE LK . sentence RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . id IGUAL term PC
    (21) sum_function -> . SUM LP id RP PC
    (27) print -> . PRINT LP id RP PC
    (28) print -> . PRINT LP TEXT RP PC
    (31) id -> . ID

    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    sentence                       shift and go to state 61
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 61

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence . RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (29) if_stmt -> . IF LP ID RP LK sentence RK
    (30) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (26) single_op -> . id IGUAL term PC
    (21) sum_function -> . SUM LP id RP PC
    (27) print -> . PRINT LP id RP PC
    (28) print -> . PRINT LP TEXT RP PC
    (31) id -> . ID

    RK              shift and go to state 62
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    single_stmt                    shift and go to state 21
    if_stmt                        shift and go to state 22
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 62

    (30) if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .

    RK              reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    IF              reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    INT             reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    SUM             reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    PRINT           reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    ID              reduce using rule 30 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)

