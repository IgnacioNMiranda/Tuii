Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMA

Grammar

Rule 0     S' -> ini
Rule 1     ini -> main
Rule 2     ini -> vacio
Rule 3     main -> MAIN LK sentence RK
Rule 4     main -> MAIN LK vacio RK
Rule 5     vacio -> <empty>
Rule 6     sentence -> single_stmt
Rule 7     sentence -> if_stmt
Rule 8     sentence -> sentence single_stmt
Rule 9     sentence -> sentence if_stmt
Rule 10    single_stmt -> int_decl
Rule 11    single_stmt -> single_op
Rule 12    single_stmt -> sum_function
Rule 13    single_stmt -> print
Rule 14    int_decl -> INT ID IGUAL term PC
Rule 15    term -> term operator term_2
Rule 16    term -> term_2
Rule 17    term_2 -> term_2 operator_2 DIGIT
Rule 18    term_2 -> term_2 operator_2 id
Rule 19    term_2 -> term_2 operator_2 sum_function
Rule 20    term_2 -> DIGIT
Rule 21    term_2 -> id
Rule 22    term_2 -> term
Rule 23    term_2 -> sum_function
Rule 24    sum_function -> SUM LP id RP PC
Rule 25    operator -> MAS
Rule 26    operator -> MENOS
Rule 27    operator_2 -> MUL
Rule 28    operator_2 -> DIV
Rule 29    single_op -> id IGUAL term PC
Rule 30    print -> PRINT LP id RP PC
Rule 31    print -> PRINT LP TEXT RP PC
Rule 32    if_stmt -> IF LP ID RP LK sentence RK
Rule 33    if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK
Rule 34    id -> ID

Terminals, with rules where they appear

COMA                 : 
DIGIT                : 17 20
DIV                  : 28
ELSE                 : 33
ID                   : 14 32 33 34
IF                   : 32 33
IGUAL                : 14 29
INT                  : 14
LK                   : 3 4 32 33 33
LP                   : 24 30 31 32 33
MAIN                 : 3 4
MAS                  : 25
MENOS                : 26
MUL                  : 27
PC                   : 14 24 29 30 31
PRINT                : 30 31
RK                   : 3 4 32 33 33
RP                   : 24 30 31 32 33
SUM                  : 24
TEXT                 : 31
error                : 

Nonterminals, with rules where they appear

id                   : 18 21 24 29 30
if_stmt              : 7 9
ini                  : 0
int_decl             : 10
main                 : 1
operator             : 15
operator_2           : 17 18 19
print                : 13
sentence             : 3 8 9 32 33 33
single_op            : 11
single_stmt          : 6 8
sum_function         : 12 19 23
term                 : 14 15 22 29
term_2               : 15 16 17 18 19
vacio                : 2 4

Parsing method: LALR

state 0

    (0) S' -> . ini
    (1) ini -> . main
    (2) ini -> . vacio
    (3) main -> . MAIN LK sentence RK
    (4) main -> . MAIN LK vacio RK
    (5) vacio -> .

    MAIN            shift and go to state 4
    $end            reduce using rule 5 (vacio -> .)

    ini                            shift and go to state 1
    main                           shift and go to state 2
    vacio                          shift and go to state 3

state 1

    (0) S' -> ini .



state 2

    (1) ini -> main .

    $end            reduce using rule 1 (ini -> main .)


state 3

    (2) ini -> vacio .

    $end            reduce using rule 2 (ini -> vacio .)


state 4

    (3) main -> MAIN . LK sentence RK
    (4) main -> MAIN . LK vacio RK

    LK              shift and go to state 5


state 5

    (3) main -> MAIN LK . sentence RK
    (4) main -> MAIN LK . vacio RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (5) vacio -> .
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (32) if_stmt -> . IF LP ID RP LK sentence RK
    (33) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (29) single_op -> . id IGUAL term PC
    (24) sum_function -> . SUM LP id RP PC
    (30) print -> . PRINT LP id RP PC
    (31) print -> . PRINT LP TEXT RP PC
    (34) id -> . ID

    RK              reduce using rule 5 (vacio -> .)
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    sentence                       shift and go to state 6
    vacio                          shift and go to state 7
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 6

    (3) main -> MAIN LK sentence . RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (32) if_stmt -> . IF LP ID RP LK sentence RK
    (33) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (29) single_op -> . id IGUAL term PC
    (24) sum_function -> . SUM LP id RP PC
    (30) print -> . PRINT LP id RP PC
    (31) print -> . PRINT LP TEXT RP PC
    (34) id -> . ID

    RK              shift and go to state 20
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    single_stmt                    shift and go to state 21
    if_stmt                        shift and go to state 22
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 7

    (4) main -> MAIN LK vacio . RK

    RK              shift and go to state 23


state 8

    (6) sentence -> single_stmt .

    RK              reduce using rule 6 (sentence -> single_stmt .)
    IF              reduce using rule 6 (sentence -> single_stmt .)
    INT             reduce using rule 6 (sentence -> single_stmt .)
    SUM             reduce using rule 6 (sentence -> single_stmt .)
    PRINT           reduce using rule 6 (sentence -> single_stmt .)
    ID              reduce using rule 6 (sentence -> single_stmt .)


state 9

    (7) sentence -> if_stmt .

    RK              reduce using rule 7 (sentence -> if_stmt .)
    IF              reduce using rule 7 (sentence -> if_stmt .)
    INT             reduce using rule 7 (sentence -> if_stmt .)
    SUM             reduce using rule 7 (sentence -> if_stmt .)
    PRINT           reduce using rule 7 (sentence -> if_stmt .)
    ID              reduce using rule 7 (sentence -> if_stmt .)


state 10

    (10) single_stmt -> int_decl .

    RK              reduce using rule 10 (single_stmt -> int_decl .)
    IF              reduce using rule 10 (single_stmt -> int_decl .)
    INT             reduce using rule 10 (single_stmt -> int_decl .)
    SUM             reduce using rule 10 (single_stmt -> int_decl .)
    PRINT           reduce using rule 10 (single_stmt -> int_decl .)
    ID              reduce using rule 10 (single_stmt -> int_decl .)


state 11

    (11) single_stmt -> single_op .

    RK              reduce using rule 11 (single_stmt -> single_op .)
    IF              reduce using rule 11 (single_stmt -> single_op .)
    INT             reduce using rule 11 (single_stmt -> single_op .)
    SUM             reduce using rule 11 (single_stmt -> single_op .)
    PRINT           reduce using rule 11 (single_stmt -> single_op .)
    ID              reduce using rule 11 (single_stmt -> single_op .)


state 12

    (12) single_stmt -> sum_function .

    RK              reduce using rule 12 (single_stmt -> sum_function .)
    IF              reduce using rule 12 (single_stmt -> sum_function .)
    INT             reduce using rule 12 (single_stmt -> sum_function .)
    SUM             reduce using rule 12 (single_stmt -> sum_function .)
    PRINT           reduce using rule 12 (single_stmt -> sum_function .)
    ID              reduce using rule 12 (single_stmt -> sum_function .)


state 13

    (13) single_stmt -> print .

    RK              reduce using rule 13 (single_stmt -> print .)
    IF              reduce using rule 13 (single_stmt -> print .)
    INT             reduce using rule 13 (single_stmt -> print .)
    SUM             reduce using rule 13 (single_stmt -> print .)
    PRINT           reduce using rule 13 (single_stmt -> print .)
    ID              reduce using rule 13 (single_stmt -> print .)


state 14

    (32) if_stmt -> IF . LP ID RP LK sentence RK
    (33) if_stmt -> IF . LP ID RP LK sentence RK ELSE LK sentence RK

    LP              shift and go to state 24


state 15

    (34) id -> ID .

    IGUAL           reduce using rule 34 (id -> ID .)
    PC              reduce using rule 34 (id -> ID .)
    MAS             reduce using rule 34 (id -> ID .)
    MENOS           reduce using rule 34 (id -> ID .)
    MUL             reduce using rule 34 (id -> ID .)
    DIV             reduce using rule 34 (id -> ID .)
    RP              reduce using rule 34 (id -> ID .)


state 16

    (14) int_decl -> INT . ID IGUAL term PC

    ID              shift and go to state 25


state 17

    (29) single_op -> id . IGUAL term PC

    IGUAL           shift and go to state 26


state 18

    (24) sum_function -> SUM . LP id RP PC

    LP              shift and go to state 27


state 19

    (30) print -> PRINT . LP id RP PC
    (31) print -> PRINT . LP TEXT RP PC

    LP              shift and go to state 28


state 20

    (3) main -> MAIN LK sentence RK .

    $end            reduce using rule 3 (main -> MAIN LK sentence RK .)


state 21

    (8) sentence -> sentence single_stmt .

    RK              reduce using rule 8 (sentence -> sentence single_stmt .)
    IF              reduce using rule 8 (sentence -> sentence single_stmt .)
    INT             reduce using rule 8 (sentence -> sentence single_stmt .)
    SUM             reduce using rule 8 (sentence -> sentence single_stmt .)
    PRINT           reduce using rule 8 (sentence -> sentence single_stmt .)
    ID              reduce using rule 8 (sentence -> sentence single_stmt .)


state 22

    (9) sentence -> sentence if_stmt .

    RK              reduce using rule 9 (sentence -> sentence if_stmt .)
    IF              reduce using rule 9 (sentence -> sentence if_stmt .)
    INT             reduce using rule 9 (sentence -> sentence if_stmt .)
    SUM             reduce using rule 9 (sentence -> sentence if_stmt .)
    PRINT           reduce using rule 9 (sentence -> sentence if_stmt .)
    ID              reduce using rule 9 (sentence -> sentence if_stmt .)


state 23

    (4) main -> MAIN LK vacio RK .

    $end            reduce using rule 4 (main -> MAIN LK vacio RK .)


state 24

    (32) if_stmt -> IF LP . ID RP LK sentence RK
    (33) if_stmt -> IF LP . ID RP LK sentence RK ELSE LK sentence RK

    ID              shift and go to state 29


state 25

    (14) int_decl -> INT ID . IGUAL term PC

    IGUAL           shift and go to state 30


state 26

    (29) single_op -> id IGUAL . term PC
    (15) term -> . term operator term_2
    (16) term -> . term_2
    (17) term_2 -> . term_2 operator_2 DIGIT
    (18) term_2 -> . term_2 operator_2 id
    (19) term_2 -> . term_2 operator_2 sum_function
    (20) term_2 -> . DIGIT
    (21) term_2 -> . id
    (22) term_2 -> . term
    (23) term_2 -> . sum_function
    (34) id -> . ID
    (24) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 34
    ID              shift and go to state 15
    SUM             shift and go to state 18

    id                             shift and go to state 31
    term                           shift and go to state 32
    term_2                         shift and go to state 33
    sum_function                   shift and go to state 35

state 27

    (24) sum_function -> SUM LP . id RP PC
    (34) id -> . ID

    ID              shift and go to state 15

    id                             shift and go to state 36

state 28

    (30) print -> PRINT LP . id RP PC
    (31) print -> PRINT LP . TEXT RP PC
    (34) id -> . ID

    TEXT            shift and go to state 38
    ID              shift and go to state 15

    id                             shift and go to state 37

state 29

    (32) if_stmt -> IF LP ID . RP LK sentence RK
    (33) if_stmt -> IF LP ID . RP LK sentence RK ELSE LK sentence RK

    RP              shift and go to state 39


state 30

    (14) int_decl -> INT ID IGUAL . term PC
    (15) term -> . term operator term_2
    (16) term -> . term_2
    (17) term_2 -> . term_2 operator_2 DIGIT
    (18) term_2 -> . term_2 operator_2 id
    (19) term_2 -> . term_2 operator_2 sum_function
    (20) term_2 -> . DIGIT
    (21) term_2 -> . id
    (22) term_2 -> . term
    (23) term_2 -> . sum_function
    (34) id -> . ID
    (24) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 34
    ID              shift and go to state 15
    SUM             shift and go to state 18

    term                           shift and go to state 40
    term_2                         shift and go to state 33
    id                             shift and go to state 31
    sum_function                   shift and go to state 35

state 31

    (21) term_2 -> id .

    PC              reduce using rule 21 (term_2 -> id .)
    MAS             reduce using rule 21 (term_2 -> id .)
    MENOS           reduce using rule 21 (term_2 -> id .)
    MUL             reduce using rule 21 (term_2 -> id .)
    DIV             reduce using rule 21 (term_2 -> id .)


state 32

    (29) single_op -> id IGUAL term . PC
    (15) term -> term . operator term_2
    (22) term_2 -> term .
    (25) operator -> . MAS
    (26) operator -> . MENOS

  ! shift/reduce conflict for PC resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PC              shift and go to state 41
    MUL             reduce using rule 22 (term_2 -> term .)
    DIV             reduce using rule 22 (term_2 -> term .)
    MAS             shift and go to state 43
    MENOS           shift and go to state 44

  ! PC              [ reduce using rule 22 (term_2 -> term .) ]
  ! MAS             [ reduce using rule 22 (term_2 -> term .) ]
  ! MENOS           [ reduce using rule 22 (term_2 -> term .) ]

    operator                       shift and go to state 42

state 33

    (16) term -> term_2 .
    (17) term_2 -> term_2 . operator_2 DIGIT
    (18) term_2 -> term_2 . operator_2 id
    (19) term_2 -> term_2 . operator_2 sum_function
    (27) operator_2 -> . MUL
    (28) operator_2 -> . DIV

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PC              reduce using rule 16 (term -> term_2 .)
    MAS             reduce using rule 16 (term -> term_2 .)
    MENOS           reduce using rule 16 (term -> term_2 .)
    MUL             shift and go to state 46
    DIV             shift and go to state 47

  ! MUL             [ reduce using rule 16 (term -> term_2 .) ]
  ! DIV             [ reduce using rule 16 (term -> term_2 .) ]

    operator_2                     shift and go to state 45

state 34

    (20) term_2 -> DIGIT .

    PC              reduce using rule 20 (term_2 -> DIGIT .)
    MAS             reduce using rule 20 (term_2 -> DIGIT .)
    MENOS           reduce using rule 20 (term_2 -> DIGIT .)
    MUL             reduce using rule 20 (term_2 -> DIGIT .)
    DIV             reduce using rule 20 (term_2 -> DIGIT .)


state 35

    (23) term_2 -> sum_function .

    PC              reduce using rule 23 (term_2 -> sum_function .)
    MAS             reduce using rule 23 (term_2 -> sum_function .)
    MENOS           reduce using rule 23 (term_2 -> sum_function .)
    MUL             reduce using rule 23 (term_2 -> sum_function .)
    DIV             reduce using rule 23 (term_2 -> sum_function .)


state 36

    (24) sum_function -> SUM LP id . RP PC

    RP              shift and go to state 48


state 37

    (30) print -> PRINT LP id . RP PC

    RP              shift and go to state 49


state 38

    (31) print -> PRINT LP TEXT . RP PC

    RP              shift and go to state 50


state 39

    (32) if_stmt -> IF LP ID RP . LK sentence RK
    (33) if_stmt -> IF LP ID RP . LK sentence RK ELSE LK sentence RK

    LK              shift and go to state 51


state 40

    (14) int_decl -> INT ID IGUAL term . PC
    (15) term -> term . operator term_2
    (22) term_2 -> term .
    (25) operator -> . MAS
    (26) operator -> . MENOS

  ! shift/reduce conflict for PC resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PC              shift and go to state 52
    MUL             reduce using rule 22 (term_2 -> term .)
    DIV             reduce using rule 22 (term_2 -> term .)
    MAS             shift and go to state 43
    MENOS           shift and go to state 44

  ! PC              [ reduce using rule 22 (term_2 -> term .) ]
  ! MAS             [ reduce using rule 22 (term_2 -> term .) ]
  ! MENOS           [ reduce using rule 22 (term_2 -> term .) ]

    operator                       shift and go to state 42

state 41

    (29) single_op -> id IGUAL term PC .

    RK              reduce using rule 29 (single_op -> id IGUAL term PC .)
    IF              reduce using rule 29 (single_op -> id IGUAL term PC .)
    INT             reduce using rule 29 (single_op -> id IGUAL term PC .)
    SUM             reduce using rule 29 (single_op -> id IGUAL term PC .)
    PRINT           reduce using rule 29 (single_op -> id IGUAL term PC .)
    ID              reduce using rule 29 (single_op -> id IGUAL term PC .)


state 42

    (15) term -> term operator . term_2
    (17) term_2 -> . term_2 operator_2 DIGIT
    (18) term_2 -> . term_2 operator_2 id
    (19) term_2 -> . term_2 operator_2 sum_function
    (20) term_2 -> . DIGIT
    (21) term_2 -> . id
    (22) term_2 -> . term
    (23) term_2 -> . sum_function
    (34) id -> . ID
    (15) term -> . term operator term_2
    (16) term -> . term_2
    (24) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 34
    ID              shift and go to state 15
    SUM             shift and go to state 18

    term                           shift and go to state 53
    term_2                         shift and go to state 54
    id                             shift and go to state 31
    sum_function                   shift and go to state 35

state 43

    (25) operator -> MAS .

    DIGIT           reduce using rule 25 (operator -> MAS .)
    ID              reduce using rule 25 (operator -> MAS .)
    SUM             reduce using rule 25 (operator -> MAS .)


state 44

    (26) operator -> MENOS .

    DIGIT           reduce using rule 26 (operator -> MENOS .)
    ID              reduce using rule 26 (operator -> MENOS .)
    SUM             reduce using rule 26 (operator -> MENOS .)


state 45

    (17) term_2 -> term_2 operator_2 . DIGIT
    (18) term_2 -> term_2 operator_2 . id
    (19) term_2 -> term_2 operator_2 . sum_function
    (34) id -> . ID
    (24) sum_function -> . SUM LP id RP PC

    DIGIT           shift and go to state 55
    ID              shift and go to state 15
    SUM             shift and go to state 18

    id                             shift and go to state 56
    sum_function                   shift and go to state 57

state 46

    (27) operator_2 -> MUL .

    DIGIT           reduce using rule 27 (operator_2 -> MUL .)
    ID              reduce using rule 27 (operator_2 -> MUL .)
    SUM             reduce using rule 27 (operator_2 -> MUL .)


state 47

    (28) operator_2 -> DIV .

    DIGIT           reduce using rule 28 (operator_2 -> DIV .)
    ID              reduce using rule 28 (operator_2 -> DIV .)
    SUM             reduce using rule 28 (operator_2 -> DIV .)


state 48

    (24) sum_function -> SUM LP id RP . PC

    PC              shift and go to state 58


state 49

    (30) print -> PRINT LP id RP . PC

    PC              shift and go to state 59


state 50

    (31) print -> PRINT LP TEXT RP . PC

    PC              shift and go to state 60


state 51

    (32) if_stmt -> IF LP ID RP LK . sentence RK
    (33) if_stmt -> IF LP ID RP LK . sentence RK ELSE LK sentence RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (32) if_stmt -> . IF LP ID RP LK sentence RK
    (33) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (29) single_op -> . id IGUAL term PC
    (24) sum_function -> . SUM LP id RP PC
    (30) print -> . PRINT LP id RP PC
    (31) print -> . PRINT LP TEXT RP PC
    (34) id -> . ID

    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    sentence                       shift and go to state 61
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 52

    (14) int_decl -> INT ID IGUAL term PC .

    RK              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    IF              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    INT             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    SUM             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    PRINT           reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    ID              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)


state 53

    (22) term_2 -> term .
    (15) term -> term . operator term_2
    (25) operator -> . MAS
    (26) operator -> . MENOS

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MUL             reduce using rule 22 (term_2 -> term .)
    DIV             reduce using rule 22 (term_2 -> term .)
    PC              reduce using rule 22 (term_2 -> term .)
    MAS             shift and go to state 43
    MENOS           shift and go to state 44

  ! MAS             [ reduce using rule 22 (term_2 -> term .) ]
  ! MENOS           [ reduce using rule 22 (term_2 -> term .) ]

    operator                       shift and go to state 42

state 54

    (15) term -> term operator term_2 .
    (17) term_2 -> term_2 . operator_2 DIGIT
    (18) term_2 -> term_2 . operator_2 id
    (19) term_2 -> term_2 . operator_2 sum_function
    (16) term -> term_2 .
    (27) operator_2 -> . MUL
    (28) operator_2 -> . DIV

  ! reduce/reduce conflict for MUL resolved using rule 15 (term -> term operator term_2 .)
  ! reduce/reduce conflict for DIV resolved using rule 15 (term -> term operator term_2 .)
  ! reduce/reduce conflict for PC resolved using rule 15 (term -> term operator term_2 .)
  ! reduce/reduce conflict for MAS resolved using rule 15 (term -> term operator term_2 .)
  ! reduce/reduce conflict for MENOS resolved using rule 15 (term -> term operator term_2 .)
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PC              reduce using rule 15 (term -> term operator term_2 .)
    MAS             reduce using rule 15 (term -> term operator term_2 .)
    MENOS           reduce using rule 15 (term -> term operator term_2 .)
    MUL             shift and go to state 46
    DIV             shift and go to state 47

  ! MUL             [ reduce using rule 15 (term -> term operator term_2 .) ]
  ! DIV             [ reduce using rule 15 (term -> term operator term_2 .) ]
  ! MUL             [ reduce using rule 16 (term -> term_2 .) ]
  ! DIV             [ reduce using rule 16 (term -> term_2 .) ]
  ! PC              [ reduce using rule 16 (term -> term_2 .) ]
  ! MAS             [ reduce using rule 16 (term -> term_2 .) ]
  ! MENOS           [ reduce using rule 16 (term -> term_2 .) ]

    operator_2                     shift and go to state 45

state 55

    (17) term_2 -> term_2 operator_2 DIGIT .

    PC              reduce using rule 17 (term_2 -> term_2 operator_2 DIGIT .)
    MAS             reduce using rule 17 (term_2 -> term_2 operator_2 DIGIT .)
    MENOS           reduce using rule 17 (term_2 -> term_2 operator_2 DIGIT .)
    MUL             reduce using rule 17 (term_2 -> term_2 operator_2 DIGIT .)
    DIV             reduce using rule 17 (term_2 -> term_2 operator_2 DIGIT .)


state 56

    (18) term_2 -> term_2 operator_2 id .

    PC              reduce using rule 18 (term_2 -> term_2 operator_2 id .)
    MAS             reduce using rule 18 (term_2 -> term_2 operator_2 id .)
    MENOS           reduce using rule 18 (term_2 -> term_2 operator_2 id .)
    MUL             reduce using rule 18 (term_2 -> term_2 operator_2 id .)
    DIV             reduce using rule 18 (term_2 -> term_2 operator_2 id .)


state 57

    (19) term_2 -> term_2 operator_2 sum_function .

    PC              reduce using rule 19 (term_2 -> term_2 operator_2 sum_function .)
    MAS             reduce using rule 19 (term_2 -> term_2 operator_2 sum_function .)
    MENOS           reduce using rule 19 (term_2 -> term_2 operator_2 sum_function .)
    MUL             reduce using rule 19 (term_2 -> term_2 operator_2 sum_function .)
    DIV             reduce using rule 19 (term_2 -> term_2 operator_2 sum_function .)


state 58

    (24) sum_function -> SUM LP id RP PC .

    RK              reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    IF              reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    INT             reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    SUM             reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    PRINT           reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    ID              reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    PC              reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    MAS             reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    MENOS           reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    MUL             reduce using rule 24 (sum_function -> SUM LP id RP PC .)
    DIV             reduce using rule 24 (sum_function -> SUM LP id RP PC .)


state 59

    (30) print -> PRINT LP id RP PC .

    RK              reduce using rule 30 (print -> PRINT LP id RP PC .)
    IF              reduce using rule 30 (print -> PRINT LP id RP PC .)
    INT             reduce using rule 30 (print -> PRINT LP id RP PC .)
    SUM             reduce using rule 30 (print -> PRINT LP id RP PC .)
    PRINT           reduce using rule 30 (print -> PRINT LP id RP PC .)
    ID              reduce using rule 30 (print -> PRINT LP id RP PC .)


state 60

    (31) print -> PRINT LP TEXT RP PC .

    RK              reduce using rule 31 (print -> PRINT LP TEXT RP PC .)
    IF              reduce using rule 31 (print -> PRINT LP TEXT RP PC .)
    INT             reduce using rule 31 (print -> PRINT LP TEXT RP PC .)
    SUM             reduce using rule 31 (print -> PRINT LP TEXT RP PC .)
    PRINT           reduce using rule 31 (print -> PRINT LP TEXT RP PC .)
    ID              reduce using rule 31 (print -> PRINT LP TEXT RP PC .)


state 61

    (32) if_stmt -> IF LP ID RP LK sentence . RK
    (33) if_stmt -> IF LP ID RP LK sentence . RK ELSE LK sentence RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (32) if_stmt -> . IF LP ID RP LK sentence RK
    (33) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (29) single_op -> . id IGUAL term PC
    (24) sum_function -> . SUM LP id RP PC
    (30) print -> . PRINT LP id RP PC
    (31) print -> . PRINT LP TEXT RP PC
    (34) id -> . ID

    RK              shift and go to state 62
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    single_stmt                    shift and go to state 21
    if_stmt                        shift and go to state 22
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 62

    (32) if_stmt -> IF LP ID RP LK sentence RK .
    (33) if_stmt -> IF LP ID RP LK sentence RK . ELSE LK sentence RK

    RK              reduce using rule 32 (if_stmt -> IF LP ID RP LK sentence RK .)
    IF              reduce using rule 32 (if_stmt -> IF LP ID RP LK sentence RK .)
    INT             reduce using rule 32 (if_stmt -> IF LP ID RP LK sentence RK .)
    SUM             reduce using rule 32 (if_stmt -> IF LP ID RP LK sentence RK .)
    PRINT           reduce using rule 32 (if_stmt -> IF LP ID RP LK sentence RK .)
    ID              reduce using rule 32 (if_stmt -> IF LP ID RP LK sentence RK .)
    ELSE            shift and go to state 63


state 63

    (33) if_stmt -> IF LP ID RP LK sentence RK ELSE . LK sentence RK

    LK              shift and go to state 64


state 64

    (33) if_stmt -> IF LP ID RP LK sentence RK ELSE LK . sentence RK
    (6) sentence -> . single_stmt
    (7) sentence -> . if_stmt
    (8) sentence -> . sentence single_stmt
    (9) sentence -> . sentence if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (32) if_stmt -> . IF LP ID RP LK sentence RK
    (33) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (29) single_op -> . id IGUAL term PC
    (24) sum_function -> . SUM LP id RP PC
    (30) print -> . PRINT LP id RP PC
    (31) print -> . PRINT LP TEXT RP PC
    (34) id -> . ID

    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    sentence                       shift and go to state 65
    single_stmt                    shift and go to state 8
    if_stmt                        shift and go to state 9
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 65

    (33) if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence . RK
    (8) sentence -> sentence . single_stmt
    (9) sentence -> sentence . if_stmt
    (10) single_stmt -> . int_decl
    (11) single_stmt -> . single_op
    (12) single_stmt -> . sum_function
    (13) single_stmt -> . print
    (32) if_stmt -> . IF LP ID RP LK sentence RK
    (33) if_stmt -> . IF LP ID RP LK sentence RK ELSE LK sentence RK
    (14) int_decl -> . INT ID IGUAL term PC
    (29) single_op -> . id IGUAL term PC
    (24) sum_function -> . SUM LP id RP PC
    (30) print -> . PRINT LP id RP PC
    (31) print -> . PRINT LP TEXT RP PC
    (34) id -> . ID

    RK              shift and go to state 66
    IF              shift and go to state 14
    INT             shift and go to state 16
    SUM             shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    single_stmt                    shift and go to state 21
    if_stmt                        shift and go to state 22
    int_decl                       shift and go to state 10
    single_op                      shift and go to state 11
    sum_function                   shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 17

state 66

    (33) if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .

    RK              reduce using rule 33 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    IF              reduce using rule 33 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    INT             reduce using rule 33 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    SUM             reduce using rule 33 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    PRINT           reduce using rule 33 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)
    ID              reduce using rule 33 (if_stmt -> IF LP ID RP LK sentence RK ELSE LK sentence RK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PC in state 32 resolved as shift
WARNING: shift/reduce conflict for MAS in state 32 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 32 resolved as shift
WARNING: shift/reduce conflict for MUL in state 33 resolved as shift
WARNING: shift/reduce conflict for DIV in state 33 resolved as shift
WARNING: shift/reduce conflict for PC in state 40 resolved as shift
WARNING: shift/reduce conflict for MAS in state 40 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 40 resolved as shift
WARNING: shift/reduce conflict for MAS in state 53 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 53 resolved as shift
WARNING: shift/reduce conflict for MUL in state 54 resolved as shift
WARNING: shift/reduce conflict for DIV in state 54 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (term -> term operator term_2)
WARNING: rejected rule (term -> term_2) in state 54
