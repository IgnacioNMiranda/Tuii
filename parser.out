Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMA

Grammar

Rule 0     S' -> ini
Rule 1     ini -> main
Rule 2     ini -> vacio
Rule 3     main -> MAIN LK sentence RK
Rule 4     vacio -> <empty>
Rule 5     sentence -> single_stmt
Rule 6     sentence -> if_stmt
Rule 7     sentence -> single_stmt sentence
Rule 8     sentence -> if_stmt sentence
Rule 9     single_stmt -> int_decl
Rule 10    single_stmt -> single_op
Rule 11    single_stmt -> print
Rule 12    int_decl -> INT ID IGUAL term PC
Rule 13    term -> DIGIT
Rule 14    term -> ID
Rule 15    term -> sum_function operator_term
Rule 16    operator_term -> operator_term operator term
Rule 17    operator_term -> vacio
Rule 18    sum_function -> SUM LP ID RP
Rule 19    operator -> MAS
Rule 20    operator -> MENOS
Rule 21    operator -> MUL
Rule 22    operator -> DIV
Rule 23    single_op -> ID IGUAL term PC
Rule 24    print -> PRINT LP ID RP PC
Rule 25    print -> PRINT LP TEXT RP PC
Rule 26    if_stmt -> IF ID LK single_stmt RK
Rule 27    if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK

Terminals, with rules where they appear

COMA                 : 
DIGIT                : 13
DIV                  : 22
ELSE                 : 27
ID                   : 12 14 18 23 24 26 27
IF                   : 26 27
IGUAL                : 12 23
INT                  : 12
LK                   : 3 26 27 27
LP                   : 18 24 25
MAIN                 : 3
MAS                  : 19
MENOS                : 20
MUL                  : 21
PC                   : 12 23 24 25
PRINT                : 24 25
RK                   : 3 26 27 27
RP                   : 18 24 25
SUM                  : 18
TEXT                 : 25
error                : 

Nonterminals, with rules where they appear

if_stmt              : 6 8
ini                  : 0
int_decl             : 9
main                 : 1
operator             : 16
operator_term        : 15 16
print                : 11
sentence             : 3 7 8
single_op            : 10
single_stmt          : 5 7 26 27 27
sum_function         : 15
term                 : 12 16 23
vacio                : 2 17

Parsing method: LALR

state 0

    (0) S' -> . ini
    (1) ini -> . main
    (2) ini -> . vacio
    (3) main -> . MAIN LK sentence RK
    (4) vacio -> .

    MAIN            shift and go to state 4
    $end            reduce using rule 4 (vacio -> .)

    ini                            shift and go to state 1
    main                           shift and go to state 2
    vacio                          shift and go to state 3

state 1

    (0) S' -> ini .



state 2

    (1) ini -> main .

    $end            reduce using rule 1 (ini -> main .)


state 3

    (2) ini -> vacio .

    $end            reduce using rule 2 (ini -> vacio .)


state 4

    (3) main -> MAIN . LK sentence RK

    LK              shift and go to state 5


state 5

    (3) main -> MAIN LK . sentence RK
    (5) sentence -> . single_stmt
    (6) sentence -> . if_stmt
    (7) sentence -> . single_stmt sentence
    (8) sentence -> . if_stmt sentence
    (9) single_stmt -> . int_decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (26) if_stmt -> . IF ID LK single_stmt RK
    (27) if_stmt -> . IF ID LK single_stmt RK ELSE LK single_stmt RK
    (12) int_decl -> . INT ID IGUAL term PC
    (23) single_op -> . ID IGUAL term PC
    (24) print -> . PRINT LP ID RP PC
    (25) print -> . PRINT LP TEXT RP PC

    IF              shift and go to state 12
    INT             shift and go to state 14
    ID              shift and go to state 13
    PRINT           shift and go to state 15

    sentence                       shift and go to state 6
    single_stmt                    shift and go to state 7
    if_stmt                        shift and go to state 8
    int_decl                       shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11

state 6

    (3) main -> MAIN LK sentence . RK

    RK              shift and go to state 16


state 7

    (5) sentence -> single_stmt .
    (7) sentence -> single_stmt . sentence
    (5) sentence -> . single_stmt
    (6) sentence -> . if_stmt
    (7) sentence -> . single_stmt sentence
    (8) sentence -> . if_stmt sentence
    (9) single_stmt -> . int_decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (26) if_stmt -> . IF ID LK single_stmt RK
    (27) if_stmt -> . IF ID LK single_stmt RK ELSE LK single_stmt RK
    (12) int_decl -> . INT ID IGUAL term PC
    (23) single_op -> . ID IGUAL term PC
    (24) print -> . PRINT LP ID RP PC
    (25) print -> . PRINT LP TEXT RP PC

    RK              reduce using rule 5 (sentence -> single_stmt .)
    IF              shift and go to state 12
    INT             shift and go to state 14
    ID              shift and go to state 13
    PRINT           shift and go to state 15

    single_stmt                    shift and go to state 7
    sentence                       shift and go to state 17
    if_stmt                        shift and go to state 8
    int_decl                       shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11

state 8

    (6) sentence -> if_stmt .
    (8) sentence -> if_stmt . sentence
    (5) sentence -> . single_stmt
    (6) sentence -> . if_stmt
    (7) sentence -> . single_stmt sentence
    (8) sentence -> . if_stmt sentence
    (9) single_stmt -> . int_decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (26) if_stmt -> . IF ID LK single_stmt RK
    (27) if_stmt -> . IF ID LK single_stmt RK ELSE LK single_stmt RK
    (12) int_decl -> . INT ID IGUAL term PC
    (23) single_op -> . ID IGUAL term PC
    (24) print -> . PRINT LP ID RP PC
    (25) print -> . PRINT LP TEXT RP PC

    RK              reduce using rule 6 (sentence -> if_stmt .)
    IF              shift and go to state 12
    INT             shift and go to state 14
    ID              shift and go to state 13
    PRINT           shift and go to state 15

    if_stmt                        shift and go to state 8
    sentence                       shift and go to state 18
    single_stmt                    shift and go to state 7
    int_decl                       shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11

state 9

    (9) single_stmt -> int_decl .

    IF              reduce using rule 9 (single_stmt -> int_decl .)
    INT             reduce using rule 9 (single_stmt -> int_decl .)
    ID              reduce using rule 9 (single_stmt -> int_decl .)
    PRINT           reduce using rule 9 (single_stmt -> int_decl .)
    RK              reduce using rule 9 (single_stmt -> int_decl .)


state 10

    (10) single_stmt -> single_op .

    IF              reduce using rule 10 (single_stmt -> single_op .)
    INT             reduce using rule 10 (single_stmt -> single_op .)
    ID              reduce using rule 10 (single_stmt -> single_op .)
    PRINT           reduce using rule 10 (single_stmt -> single_op .)
    RK              reduce using rule 10 (single_stmt -> single_op .)


state 11

    (11) single_stmt -> print .

    IF              reduce using rule 11 (single_stmt -> print .)
    INT             reduce using rule 11 (single_stmt -> print .)
    ID              reduce using rule 11 (single_stmt -> print .)
    PRINT           reduce using rule 11 (single_stmt -> print .)
    RK              reduce using rule 11 (single_stmt -> print .)


state 12

    (26) if_stmt -> IF . ID LK single_stmt RK
    (27) if_stmt -> IF . ID LK single_stmt RK ELSE LK single_stmt RK

    ID              shift and go to state 19


state 13

    (23) single_op -> ID . IGUAL term PC

    IGUAL           shift and go to state 20


state 14

    (12) int_decl -> INT . ID IGUAL term PC

    ID              shift and go to state 21


state 15

    (24) print -> PRINT . LP ID RP PC
    (25) print -> PRINT . LP TEXT RP PC

    LP              shift and go to state 22


state 16

    (3) main -> MAIN LK sentence RK .

    $end            reduce using rule 3 (main -> MAIN LK sentence RK .)


state 17

    (7) sentence -> single_stmt sentence .

    RK              reduce using rule 7 (sentence -> single_stmt sentence .)


state 18

    (8) sentence -> if_stmt sentence .

    RK              reduce using rule 8 (sentence -> if_stmt sentence .)


state 19

    (26) if_stmt -> IF ID . LK single_stmt RK
    (27) if_stmt -> IF ID . LK single_stmt RK ELSE LK single_stmt RK

    LK              shift and go to state 23


state 20

    (23) single_op -> ID IGUAL . term PC
    (13) term -> . DIGIT
    (14) term -> . ID
    (15) term -> . sum_function operator_term
    (18) sum_function -> . SUM LP ID RP

    DIGIT           shift and go to state 26
    ID              shift and go to state 24
    SUM             shift and go to state 28

    term                           shift and go to state 25
    sum_function                   shift and go to state 27

state 21

    (12) int_decl -> INT ID . IGUAL term PC

    IGUAL           shift and go to state 29


state 22

    (24) print -> PRINT LP . ID RP PC
    (25) print -> PRINT LP . TEXT RP PC

    ID              shift and go to state 30
    TEXT            shift and go to state 31


state 23

    (26) if_stmt -> IF ID LK . single_stmt RK
    (27) if_stmt -> IF ID LK . single_stmt RK ELSE LK single_stmt RK
    (9) single_stmt -> . int_decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (12) int_decl -> . INT ID IGUAL term PC
    (23) single_op -> . ID IGUAL term PC
    (24) print -> . PRINT LP ID RP PC
    (25) print -> . PRINT LP TEXT RP PC

    INT             shift and go to state 14
    ID              shift and go to state 13
    PRINT           shift and go to state 15

    single_stmt                    shift and go to state 32
    int_decl                       shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11

state 24

    (14) term -> ID .

    PC              reduce using rule 14 (term -> ID .)
    MAS             reduce using rule 14 (term -> ID .)
    MENOS           reduce using rule 14 (term -> ID .)
    MUL             reduce using rule 14 (term -> ID .)
    DIV             reduce using rule 14 (term -> ID .)


state 25

    (23) single_op -> ID IGUAL term . PC

    PC              shift and go to state 33


state 26

    (13) term -> DIGIT .

    PC              reduce using rule 13 (term -> DIGIT .)
    MAS             reduce using rule 13 (term -> DIGIT .)
    MENOS           reduce using rule 13 (term -> DIGIT .)
    MUL             reduce using rule 13 (term -> DIGIT .)
    DIV             reduce using rule 13 (term -> DIGIT .)


state 27

    (15) term -> sum_function . operator_term
    (16) operator_term -> . operator_term operator term
    (17) operator_term -> . vacio
    (4) vacio -> .

    MAS             reduce using rule 4 (vacio -> .)
    MENOS           reduce using rule 4 (vacio -> .)
    MUL             reduce using rule 4 (vacio -> .)
    DIV             reduce using rule 4 (vacio -> .)
    PC              reduce using rule 4 (vacio -> .)

    operator_term                  shift and go to state 34
    vacio                          shift and go to state 35

state 28

    (18) sum_function -> SUM . LP ID RP

    LP              shift and go to state 36


state 29

    (12) int_decl -> INT ID IGUAL . term PC
    (13) term -> . DIGIT
    (14) term -> . ID
    (15) term -> . sum_function operator_term
    (18) sum_function -> . SUM LP ID RP

    DIGIT           shift and go to state 26
    ID              shift and go to state 24
    SUM             shift and go to state 28

    term                           shift and go to state 37
    sum_function                   shift and go to state 27

state 30

    (24) print -> PRINT LP ID . RP PC

    RP              shift and go to state 38


state 31

    (25) print -> PRINT LP TEXT . RP PC

    RP              shift and go to state 39


state 32

    (26) if_stmt -> IF ID LK single_stmt . RK
    (27) if_stmt -> IF ID LK single_stmt . RK ELSE LK single_stmt RK

    RK              shift and go to state 40


state 33

    (23) single_op -> ID IGUAL term PC .

    IF              reduce using rule 23 (single_op -> ID IGUAL term PC .)
    INT             reduce using rule 23 (single_op -> ID IGUAL term PC .)
    ID              reduce using rule 23 (single_op -> ID IGUAL term PC .)
    PRINT           reduce using rule 23 (single_op -> ID IGUAL term PC .)
    RK              reduce using rule 23 (single_op -> ID IGUAL term PC .)


state 34

    (15) term -> sum_function operator_term .
    (16) operator_term -> operator_term . operator term
    (19) operator -> . MAS
    (20) operator -> . MENOS
    (21) operator -> . MUL
    (22) operator -> . DIV

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PC              reduce using rule 15 (term -> sum_function operator_term .)
    MAS             shift and go to state 42
    MENOS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45

  ! MAS             [ reduce using rule 15 (term -> sum_function operator_term .) ]
  ! MENOS           [ reduce using rule 15 (term -> sum_function operator_term .) ]
  ! MUL             [ reduce using rule 15 (term -> sum_function operator_term .) ]
  ! DIV             [ reduce using rule 15 (term -> sum_function operator_term .) ]

    operator                       shift and go to state 41

state 35

    (17) operator_term -> vacio .

    MAS             reduce using rule 17 (operator_term -> vacio .)
    MENOS           reduce using rule 17 (operator_term -> vacio .)
    MUL             reduce using rule 17 (operator_term -> vacio .)
    DIV             reduce using rule 17 (operator_term -> vacio .)
    PC              reduce using rule 17 (operator_term -> vacio .)


state 36

    (18) sum_function -> SUM LP . ID RP

    ID              shift and go to state 46


state 37

    (12) int_decl -> INT ID IGUAL term . PC

    PC              shift and go to state 47


state 38

    (24) print -> PRINT LP ID RP . PC

    PC              shift and go to state 48


state 39

    (25) print -> PRINT LP TEXT RP . PC

    PC              shift and go to state 49


state 40

    (26) if_stmt -> IF ID LK single_stmt RK .
    (27) if_stmt -> IF ID LK single_stmt RK . ELSE LK single_stmt RK

    IF              reduce using rule 26 (if_stmt -> IF ID LK single_stmt RK .)
    INT             reduce using rule 26 (if_stmt -> IF ID LK single_stmt RK .)
    ID              reduce using rule 26 (if_stmt -> IF ID LK single_stmt RK .)
    PRINT           reduce using rule 26 (if_stmt -> IF ID LK single_stmt RK .)
    RK              reduce using rule 26 (if_stmt -> IF ID LK single_stmt RK .)
    ELSE            shift and go to state 50


state 41

    (16) operator_term -> operator_term operator . term
    (13) term -> . DIGIT
    (14) term -> . ID
    (15) term -> . sum_function operator_term
    (18) sum_function -> . SUM LP ID RP

    DIGIT           shift and go to state 26
    ID              shift and go to state 24
    SUM             shift and go to state 28

    term                           shift and go to state 51
    sum_function                   shift and go to state 27

state 42

    (19) operator -> MAS .

    DIGIT           reduce using rule 19 (operator -> MAS .)
    ID              reduce using rule 19 (operator -> MAS .)
    SUM             reduce using rule 19 (operator -> MAS .)


state 43

    (20) operator -> MENOS .

    DIGIT           reduce using rule 20 (operator -> MENOS .)
    ID              reduce using rule 20 (operator -> MENOS .)
    SUM             reduce using rule 20 (operator -> MENOS .)


state 44

    (21) operator -> MUL .

    DIGIT           reduce using rule 21 (operator -> MUL .)
    ID              reduce using rule 21 (operator -> MUL .)
    SUM             reduce using rule 21 (operator -> MUL .)


state 45

    (22) operator -> DIV .

    DIGIT           reduce using rule 22 (operator -> DIV .)
    ID              reduce using rule 22 (operator -> DIV .)
    SUM             reduce using rule 22 (operator -> DIV .)


state 46

    (18) sum_function -> SUM LP ID . RP

    RP              shift and go to state 52


state 47

    (12) int_decl -> INT ID IGUAL term PC .

    IF              reduce using rule 12 (int_decl -> INT ID IGUAL term PC .)
    INT             reduce using rule 12 (int_decl -> INT ID IGUAL term PC .)
    ID              reduce using rule 12 (int_decl -> INT ID IGUAL term PC .)
    PRINT           reduce using rule 12 (int_decl -> INT ID IGUAL term PC .)
    RK              reduce using rule 12 (int_decl -> INT ID IGUAL term PC .)


state 48

    (24) print -> PRINT LP ID RP PC .

    IF              reduce using rule 24 (print -> PRINT LP ID RP PC .)
    INT             reduce using rule 24 (print -> PRINT LP ID RP PC .)
    ID              reduce using rule 24 (print -> PRINT LP ID RP PC .)
    PRINT           reduce using rule 24 (print -> PRINT LP ID RP PC .)
    RK              reduce using rule 24 (print -> PRINT LP ID RP PC .)


state 49

    (25) print -> PRINT LP TEXT RP PC .

    IF              reduce using rule 25 (print -> PRINT LP TEXT RP PC .)
    INT             reduce using rule 25 (print -> PRINT LP TEXT RP PC .)
    ID              reduce using rule 25 (print -> PRINT LP TEXT RP PC .)
    PRINT           reduce using rule 25 (print -> PRINT LP TEXT RP PC .)
    RK              reduce using rule 25 (print -> PRINT LP TEXT RP PC .)


state 50

    (27) if_stmt -> IF ID LK single_stmt RK ELSE . LK single_stmt RK

    LK              shift and go to state 53


state 51

    (16) operator_term -> operator_term operator term .

    MAS             reduce using rule 16 (operator_term -> operator_term operator term .)
    MENOS           reduce using rule 16 (operator_term -> operator_term operator term .)
    MUL             reduce using rule 16 (operator_term -> operator_term operator term .)
    DIV             reduce using rule 16 (operator_term -> operator_term operator term .)
    PC              reduce using rule 16 (operator_term -> operator_term operator term .)


state 52

    (18) sum_function -> SUM LP ID RP .

    MAS             reduce using rule 18 (sum_function -> SUM LP ID RP .)
    MENOS           reduce using rule 18 (sum_function -> SUM LP ID RP .)
    MUL             reduce using rule 18 (sum_function -> SUM LP ID RP .)
    DIV             reduce using rule 18 (sum_function -> SUM LP ID RP .)
    PC              reduce using rule 18 (sum_function -> SUM LP ID RP .)


state 53

    (27) if_stmt -> IF ID LK single_stmt RK ELSE LK . single_stmt RK
    (9) single_stmt -> . int_decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (12) int_decl -> . INT ID IGUAL term PC
    (23) single_op -> . ID IGUAL term PC
    (24) print -> . PRINT LP ID RP PC
    (25) print -> . PRINT LP TEXT RP PC

    INT             shift and go to state 14
    ID              shift and go to state 13
    PRINT           shift and go to state 15

    single_stmt                    shift and go to state 54
    int_decl                       shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11

state 54

    (27) if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt . RK

    RK              shift and go to state 55


state 55

    (27) if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .

    IF              reduce using rule 27 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    INT             reduce using rule 27 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    ID              reduce using rule 27 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    PRINT           reduce using rule 27 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    RK              reduce using rule 27 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 34 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 34 resolved as shift
WARNING: shift/reduce conflict for MUL in state 34 resolved as shift
WARNING: shift/reduce conflict for DIV in state 34 resolved as shift
