Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA

Grammar

Rule 0     S' -> ini
Rule 1     ini -> main
Rule 2     ini -> vacio
Rule 3     main -> MAIN LK sentence RK
Rule 4     vacio -> <empty>
Rule 5     sentence -> single_stmt
Rule 6     sentence -> if_stmt
Rule 7     sentence -> single_stmt sentence
Rule 8     sentence -> if_stmt sentence
Rule 9     single_stmt -> decl
Rule 10    single_stmt -> single_op
Rule 11    single_stmt -> print
Rule 12    decl -> int_decl
Rule 13    decl -> matrix_decl
Rule 14    int_decl -> INT ID IGUAL term PC
Rule 15    term -> DIGIT
Rule 16    term -> ID
Rule 17    term -> sum_function operator_term
Rule 18    operator_term -> operator_term operator term
Rule 19    operator_term -> vacio
Rule 20    sum_function -> SUM LP ID RP
Rule 21    operator -> MAS
Rule 22    operator -> MENOS
Rule 23    operator -> MUL
Rule 24    operator -> DIV
Rule 25    matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC
Rule 26    matrix_value -> DIGIT possibly_next_matrix_row_value possibly_next_matrix_row
Rule 27    possibly_next_matrix_row_value -> COMA matrix_value possibly_next_matrix_row_value
Rule 28    possibly_next_matrix_row_value -> vacio
Rule 29    possibly_next_matrix_row -> matrix_nextvalue possibly_next_matrix_row
Rule 30    possibly_next_matrix_row -> vacio
Rule 31    matrix_nextvalue -> BV matrix_value
Rule 32    matrix_nextvalue -> vacio
Rule 33    single_op -> ID IGUAL term
Rule 34    print -> PRINT LP ID RP
Rule 35    print -> PRINT LP TEXT RP
Rule 36    if_stmt -> IF ID LK single_stmt RK
Rule 37    if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK

Terminals, with rules where they appear

BV                   : 31
COMA                 : 27
COMILLA              : 
DIGIT                : 15 26
DIV                  : 24
ELSE                 : 37
ID                   : 14 16 20 25 33 34 36 37
IF                   : 36 37
IGUAL                : 14 25 33
INT                  : 14
LC                   : 25
LK                   : 3 36 37 37
LP                   : 20 34 35
MAIN                 : 3
MAS                  : 21
MATRIX               : 25
MENOS                : 22
MUL                  : 23
PC                   : 14 25
PRINT                : 34 35
RC                   : 25
RK                   : 3 36 37 37
RP                   : 20 34 35
SUM                  : 20
TEXT                 : 35
error                : 

Nonterminals, with rules where they appear

decl                 : 9
if_stmt              : 6 8
ini                  : 0
int_decl             : 12
main                 : 1
matrix_decl          : 13
matrix_nextvalue     : 29
matrix_value         : 25 27 31
operator             : 18
operator_term        : 17 18
possibly_next_matrix_row : 26 29
possibly_next_matrix_row_value : 26 27
print                : 11
sentence             : 3 7 8
single_op            : 10
single_stmt          : 5 7 36 37 37
sum_function         : 17
term                 : 14 18 33
vacio                : 2 19 28 30 32

Parsing method: LALR

state 0

    (0) S' -> . ini
    (1) ini -> . main
    (2) ini -> . vacio
    (3) main -> . MAIN LK sentence RK
    (4) vacio -> .

    MAIN            shift and go to state 4
    $end            reduce using rule 4 (vacio -> .)

    ini                            shift and go to state 1
    main                           shift and go to state 2
    vacio                          shift and go to state 3

state 1

    (0) S' -> ini .



state 2

    (1) ini -> main .

    $end            reduce using rule 1 (ini -> main .)


state 3

    (2) ini -> vacio .

    $end            reduce using rule 2 (ini -> vacio .)


state 4

    (3) main -> MAIN . LK sentence RK

    LK              shift and go to state 5


state 5

    (3) main -> MAIN LK . sentence RK
    (5) sentence -> . single_stmt
    (6) sentence -> . if_stmt
    (7) sentence -> . single_stmt sentence
    (8) sentence -> . if_stmt sentence
    (9) single_stmt -> . decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (36) if_stmt -> . IF ID LK single_stmt RK
    (37) if_stmt -> . IF ID LK single_stmt RK ELSE LK single_stmt RK
    (12) decl -> . int_decl
    (13) decl -> . matrix_decl
    (33) single_op -> . ID IGUAL term
    (34) print -> . PRINT LP ID RP
    (35) print -> . PRINT LP TEXT RP
    (14) int_decl -> . INT ID IGUAL term PC
    (25) matrix_decl -> . MATRIX ID IGUAL LC matrix_value RC PC

    IF              shift and go to state 12
    ID              shift and go to state 13
    PRINT           shift and go to state 16
    INT             shift and go to state 17
    MATRIX          shift and go to state 18

    sentence                       shift and go to state 6
    single_stmt                    shift and go to state 7
    if_stmt                        shift and go to state 8
    decl                           shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11
    int_decl                       shift and go to state 14
    matrix_decl                    shift and go to state 15

state 6

    (3) main -> MAIN LK sentence . RK

    RK              shift and go to state 19


state 7

    (5) sentence -> single_stmt .
    (7) sentence -> single_stmt . sentence
    (5) sentence -> . single_stmt
    (6) sentence -> . if_stmt
    (7) sentence -> . single_stmt sentence
    (8) sentence -> . if_stmt sentence
    (9) single_stmt -> . decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (36) if_stmt -> . IF ID LK single_stmt RK
    (37) if_stmt -> . IF ID LK single_stmt RK ELSE LK single_stmt RK
    (12) decl -> . int_decl
    (13) decl -> . matrix_decl
    (33) single_op -> . ID IGUAL term
    (34) print -> . PRINT LP ID RP
    (35) print -> . PRINT LP TEXT RP
    (14) int_decl -> . INT ID IGUAL term PC
    (25) matrix_decl -> . MATRIX ID IGUAL LC matrix_value RC PC

    RK              reduce using rule 5 (sentence -> single_stmt .)
    IF              shift and go to state 12
    ID              shift and go to state 13
    PRINT           shift and go to state 16
    INT             shift and go to state 17
    MATRIX          shift and go to state 18

    single_stmt                    shift and go to state 7
    sentence                       shift and go to state 20
    if_stmt                        shift and go to state 8
    decl                           shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11
    int_decl                       shift and go to state 14
    matrix_decl                    shift and go to state 15

state 8

    (6) sentence -> if_stmt .
    (8) sentence -> if_stmt . sentence
    (5) sentence -> . single_stmt
    (6) sentence -> . if_stmt
    (7) sentence -> . single_stmt sentence
    (8) sentence -> . if_stmt sentence
    (9) single_stmt -> . decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (36) if_stmt -> . IF ID LK single_stmt RK
    (37) if_stmt -> . IF ID LK single_stmt RK ELSE LK single_stmt RK
    (12) decl -> . int_decl
    (13) decl -> . matrix_decl
    (33) single_op -> . ID IGUAL term
    (34) print -> . PRINT LP ID RP
    (35) print -> . PRINT LP TEXT RP
    (14) int_decl -> . INT ID IGUAL term PC
    (25) matrix_decl -> . MATRIX ID IGUAL LC matrix_value RC PC

    RK              reduce using rule 6 (sentence -> if_stmt .)
    IF              shift and go to state 12
    ID              shift and go to state 13
    PRINT           shift and go to state 16
    INT             shift and go to state 17
    MATRIX          shift and go to state 18

    if_stmt                        shift and go to state 8
    sentence                       shift and go to state 21
    single_stmt                    shift and go to state 7
    decl                           shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11
    int_decl                       shift and go to state 14
    matrix_decl                    shift and go to state 15

state 9

    (9) single_stmt -> decl .

    IF              reduce using rule 9 (single_stmt -> decl .)
    ID              reduce using rule 9 (single_stmt -> decl .)
    PRINT           reduce using rule 9 (single_stmt -> decl .)
    INT             reduce using rule 9 (single_stmt -> decl .)
    MATRIX          reduce using rule 9 (single_stmt -> decl .)
    RK              reduce using rule 9 (single_stmt -> decl .)


state 10

    (10) single_stmt -> single_op .

    IF              reduce using rule 10 (single_stmt -> single_op .)
    ID              reduce using rule 10 (single_stmt -> single_op .)
    PRINT           reduce using rule 10 (single_stmt -> single_op .)
    INT             reduce using rule 10 (single_stmt -> single_op .)
    MATRIX          reduce using rule 10 (single_stmt -> single_op .)
    RK              reduce using rule 10 (single_stmt -> single_op .)


state 11

    (11) single_stmt -> print .

    IF              reduce using rule 11 (single_stmt -> print .)
    ID              reduce using rule 11 (single_stmt -> print .)
    PRINT           reduce using rule 11 (single_stmt -> print .)
    INT             reduce using rule 11 (single_stmt -> print .)
    MATRIX          reduce using rule 11 (single_stmt -> print .)
    RK              reduce using rule 11 (single_stmt -> print .)


state 12

    (36) if_stmt -> IF . ID LK single_stmt RK
    (37) if_stmt -> IF . ID LK single_stmt RK ELSE LK single_stmt RK

    ID              shift and go to state 22


state 13

    (33) single_op -> ID . IGUAL term

    IGUAL           shift and go to state 23


state 14

    (12) decl -> int_decl .

    IF              reduce using rule 12 (decl -> int_decl .)
    ID              reduce using rule 12 (decl -> int_decl .)
    PRINT           reduce using rule 12 (decl -> int_decl .)
    INT             reduce using rule 12 (decl -> int_decl .)
    MATRIX          reduce using rule 12 (decl -> int_decl .)
    RK              reduce using rule 12 (decl -> int_decl .)


state 15

    (13) decl -> matrix_decl .

    IF              reduce using rule 13 (decl -> matrix_decl .)
    ID              reduce using rule 13 (decl -> matrix_decl .)
    PRINT           reduce using rule 13 (decl -> matrix_decl .)
    INT             reduce using rule 13 (decl -> matrix_decl .)
    MATRIX          reduce using rule 13 (decl -> matrix_decl .)
    RK              reduce using rule 13 (decl -> matrix_decl .)


state 16

    (34) print -> PRINT . LP ID RP
    (35) print -> PRINT . LP TEXT RP

    LP              shift and go to state 24


state 17

    (14) int_decl -> INT . ID IGUAL term PC

    ID              shift and go to state 25


state 18

    (25) matrix_decl -> MATRIX . ID IGUAL LC matrix_value RC PC

    ID              shift and go to state 26


state 19

    (3) main -> MAIN LK sentence RK .

    $end            reduce using rule 3 (main -> MAIN LK sentence RK .)


state 20

    (7) sentence -> single_stmt sentence .

    RK              reduce using rule 7 (sentence -> single_stmt sentence .)


state 21

    (8) sentence -> if_stmt sentence .

    RK              reduce using rule 8 (sentence -> if_stmt sentence .)


state 22

    (36) if_stmt -> IF ID . LK single_stmt RK
    (37) if_stmt -> IF ID . LK single_stmt RK ELSE LK single_stmt RK

    LK              shift and go to state 27


state 23

    (33) single_op -> ID IGUAL . term
    (15) term -> . DIGIT
    (16) term -> . ID
    (17) term -> . sum_function operator_term
    (20) sum_function -> . SUM LP ID RP

    DIGIT           shift and go to state 30
    ID              shift and go to state 28
    SUM             shift and go to state 32

    term                           shift and go to state 29
    sum_function                   shift and go to state 31

state 24

    (34) print -> PRINT LP . ID RP
    (35) print -> PRINT LP . TEXT RP

    ID              shift and go to state 33
    TEXT            shift and go to state 34


state 25

    (14) int_decl -> INT ID . IGUAL term PC

    IGUAL           shift and go to state 35


state 26

    (25) matrix_decl -> MATRIX ID . IGUAL LC matrix_value RC PC

    IGUAL           shift and go to state 36


state 27

    (36) if_stmt -> IF ID LK . single_stmt RK
    (37) if_stmt -> IF ID LK . single_stmt RK ELSE LK single_stmt RK
    (9) single_stmt -> . decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (12) decl -> . int_decl
    (13) decl -> . matrix_decl
    (33) single_op -> . ID IGUAL term
    (34) print -> . PRINT LP ID RP
    (35) print -> . PRINT LP TEXT RP
    (14) int_decl -> . INT ID IGUAL term PC
    (25) matrix_decl -> . MATRIX ID IGUAL LC matrix_value RC PC

    ID              shift and go to state 13
    PRINT           shift and go to state 16
    INT             shift and go to state 17
    MATRIX          shift and go to state 18

    single_stmt                    shift and go to state 37
    decl                           shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11
    int_decl                       shift and go to state 14
    matrix_decl                    shift and go to state 15

state 28

    (16) term -> ID .

    IF              reduce using rule 16 (term -> ID .)
    ID              reduce using rule 16 (term -> ID .)
    PRINT           reduce using rule 16 (term -> ID .)
    INT             reduce using rule 16 (term -> ID .)
    MATRIX          reduce using rule 16 (term -> ID .)
    RK              reduce using rule 16 (term -> ID .)
    PC              reduce using rule 16 (term -> ID .)
    MAS             reduce using rule 16 (term -> ID .)
    MENOS           reduce using rule 16 (term -> ID .)
    MUL             reduce using rule 16 (term -> ID .)
    DIV             reduce using rule 16 (term -> ID .)


state 29

    (33) single_op -> ID IGUAL term .

    IF              reduce using rule 33 (single_op -> ID IGUAL term .)
    ID              reduce using rule 33 (single_op -> ID IGUAL term .)
    PRINT           reduce using rule 33 (single_op -> ID IGUAL term .)
    INT             reduce using rule 33 (single_op -> ID IGUAL term .)
    MATRIX          reduce using rule 33 (single_op -> ID IGUAL term .)
    RK              reduce using rule 33 (single_op -> ID IGUAL term .)


state 30

    (15) term -> DIGIT .

    IF              reduce using rule 15 (term -> DIGIT .)
    ID              reduce using rule 15 (term -> DIGIT .)
    PRINT           reduce using rule 15 (term -> DIGIT .)
    INT             reduce using rule 15 (term -> DIGIT .)
    MATRIX          reduce using rule 15 (term -> DIGIT .)
    RK              reduce using rule 15 (term -> DIGIT .)
    PC              reduce using rule 15 (term -> DIGIT .)
    MAS             reduce using rule 15 (term -> DIGIT .)
    MENOS           reduce using rule 15 (term -> DIGIT .)
    MUL             reduce using rule 15 (term -> DIGIT .)
    DIV             reduce using rule 15 (term -> DIGIT .)


state 31

    (17) term -> sum_function . operator_term
    (18) operator_term -> . operator_term operator term
    (19) operator_term -> . vacio
    (4) vacio -> .

    MAS             reduce using rule 4 (vacio -> .)
    MENOS           reduce using rule 4 (vacio -> .)
    MUL             reduce using rule 4 (vacio -> .)
    DIV             reduce using rule 4 (vacio -> .)
    IF              reduce using rule 4 (vacio -> .)
    ID              reduce using rule 4 (vacio -> .)
    PRINT           reduce using rule 4 (vacio -> .)
    INT             reduce using rule 4 (vacio -> .)
    MATRIX          reduce using rule 4 (vacio -> .)
    RK              reduce using rule 4 (vacio -> .)
    PC              reduce using rule 4 (vacio -> .)

    operator_term                  shift and go to state 38
    vacio                          shift and go to state 39

state 32

    (20) sum_function -> SUM . LP ID RP

    LP              shift and go to state 40


state 33

    (34) print -> PRINT LP ID . RP

    RP              shift and go to state 41


state 34

    (35) print -> PRINT LP TEXT . RP

    RP              shift and go to state 42


state 35

    (14) int_decl -> INT ID IGUAL . term PC
    (15) term -> . DIGIT
    (16) term -> . ID
    (17) term -> . sum_function operator_term
    (20) sum_function -> . SUM LP ID RP

    DIGIT           shift and go to state 30
    ID              shift and go to state 28
    SUM             shift and go to state 32

    term                           shift and go to state 43
    sum_function                   shift and go to state 31

state 36

    (25) matrix_decl -> MATRIX ID IGUAL . LC matrix_value RC PC

    LC              shift and go to state 44


state 37

    (36) if_stmt -> IF ID LK single_stmt . RK
    (37) if_stmt -> IF ID LK single_stmt . RK ELSE LK single_stmt RK

    RK              shift and go to state 45


state 38

    (17) term -> sum_function operator_term .
    (18) operator_term -> operator_term . operator term
    (21) operator -> . MAS
    (22) operator -> . MENOS
    (23) operator -> . MUL
    (24) operator -> . DIV

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    IF              reduce using rule 17 (term -> sum_function operator_term .)
    ID              reduce using rule 17 (term -> sum_function operator_term .)
    PRINT           reduce using rule 17 (term -> sum_function operator_term .)
    INT             reduce using rule 17 (term -> sum_function operator_term .)
    MATRIX          reduce using rule 17 (term -> sum_function operator_term .)
    RK              reduce using rule 17 (term -> sum_function operator_term .)
    PC              reduce using rule 17 (term -> sum_function operator_term .)
    MAS             shift and go to state 47
    MENOS           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50

  ! MAS             [ reduce using rule 17 (term -> sum_function operator_term .) ]
  ! MENOS           [ reduce using rule 17 (term -> sum_function operator_term .) ]
  ! MUL             [ reduce using rule 17 (term -> sum_function operator_term .) ]
  ! DIV             [ reduce using rule 17 (term -> sum_function operator_term .) ]

    operator                       shift and go to state 46

state 39

    (19) operator_term -> vacio .

    MAS             reduce using rule 19 (operator_term -> vacio .)
    MENOS           reduce using rule 19 (operator_term -> vacio .)
    MUL             reduce using rule 19 (operator_term -> vacio .)
    DIV             reduce using rule 19 (operator_term -> vacio .)
    IF              reduce using rule 19 (operator_term -> vacio .)
    ID              reduce using rule 19 (operator_term -> vacio .)
    PRINT           reduce using rule 19 (operator_term -> vacio .)
    INT             reduce using rule 19 (operator_term -> vacio .)
    MATRIX          reduce using rule 19 (operator_term -> vacio .)
    RK              reduce using rule 19 (operator_term -> vacio .)
    PC              reduce using rule 19 (operator_term -> vacio .)


state 40

    (20) sum_function -> SUM LP . ID RP

    ID              shift and go to state 51


state 41

    (34) print -> PRINT LP ID RP .

    IF              reduce using rule 34 (print -> PRINT LP ID RP .)
    ID              reduce using rule 34 (print -> PRINT LP ID RP .)
    PRINT           reduce using rule 34 (print -> PRINT LP ID RP .)
    INT             reduce using rule 34 (print -> PRINT LP ID RP .)
    MATRIX          reduce using rule 34 (print -> PRINT LP ID RP .)
    RK              reduce using rule 34 (print -> PRINT LP ID RP .)


state 42

    (35) print -> PRINT LP TEXT RP .

    IF              reduce using rule 35 (print -> PRINT LP TEXT RP .)
    ID              reduce using rule 35 (print -> PRINT LP TEXT RP .)
    PRINT           reduce using rule 35 (print -> PRINT LP TEXT RP .)
    INT             reduce using rule 35 (print -> PRINT LP TEXT RP .)
    MATRIX          reduce using rule 35 (print -> PRINT LP TEXT RP .)
    RK              reduce using rule 35 (print -> PRINT LP TEXT RP .)


state 43

    (14) int_decl -> INT ID IGUAL term . PC

    PC              shift and go to state 52


state 44

    (25) matrix_decl -> MATRIX ID IGUAL LC . matrix_value RC PC
    (26) matrix_value -> . DIGIT possibly_next_matrix_row_value possibly_next_matrix_row

    DIGIT           shift and go to state 54

    matrix_value                   shift and go to state 53

state 45

    (36) if_stmt -> IF ID LK single_stmt RK .
    (37) if_stmt -> IF ID LK single_stmt RK . ELSE LK single_stmt RK

    IF              reduce using rule 36 (if_stmt -> IF ID LK single_stmt RK .)
    ID              reduce using rule 36 (if_stmt -> IF ID LK single_stmt RK .)
    PRINT           reduce using rule 36 (if_stmt -> IF ID LK single_stmt RK .)
    INT             reduce using rule 36 (if_stmt -> IF ID LK single_stmt RK .)
    MATRIX          reduce using rule 36 (if_stmt -> IF ID LK single_stmt RK .)
    RK              reduce using rule 36 (if_stmt -> IF ID LK single_stmt RK .)
    ELSE            shift and go to state 55


state 46

    (18) operator_term -> operator_term operator . term
    (15) term -> . DIGIT
    (16) term -> . ID
    (17) term -> . sum_function operator_term
    (20) sum_function -> . SUM LP ID RP

    DIGIT           shift and go to state 30
    ID              shift and go to state 28
    SUM             shift and go to state 32

    term                           shift and go to state 56
    sum_function                   shift and go to state 31

state 47

    (21) operator -> MAS .

    DIGIT           reduce using rule 21 (operator -> MAS .)
    ID              reduce using rule 21 (operator -> MAS .)
    SUM             reduce using rule 21 (operator -> MAS .)


state 48

    (22) operator -> MENOS .

    DIGIT           reduce using rule 22 (operator -> MENOS .)
    ID              reduce using rule 22 (operator -> MENOS .)
    SUM             reduce using rule 22 (operator -> MENOS .)


state 49

    (23) operator -> MUL .

    DIGIT           reduce using rule 23 (operator -> MUL .)
    ID              reduce using rule 23 (operator -> MUL .)
    SUM             reduce using rule 23 (operator -> MUL .)


state 50

    (24) operator -> DIV .

    DIGIT           reduce using rule 24 (operator -> DIV .)
    ID              reduce using rule 24 (operator -> DIV .)
    SUM             reduce using rule 24 (operator -> DIV .)


state 51

    (20) sum_function -> SUM LP ID . RP

    RP              shift and go to state 57


state 52

    (14) int_decl -> INT ID IGUAL term PC .

    IF              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    ID              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    PRINT           reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    INT             reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    MATRIX          reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)
    RK              reduce using rule 14 (int_decl -> INT ID IGUAL term PC .)


state 53

    (25) matrix_decl -> MATRIX ID IGUAL LC matrix_value . RC PC

    RC              shift and go to state 58


state 54

    (26) matrix_value -> DIGIT . possibly_next_matrix_row_value possibly_next_matrix_row
    (27) possibly_next_matrix_row_value -> . COMA matrix_value possibly_next_matrix_row_value
    (28) possibly_next_matrix_row_value -> . vacio
    (4) vacio -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 60
    BV              reduce using rule 4 (vacio -> .)
    RC              reduce using rule 4 (vacio -> .)

  ! COMA            [ reduce using rule 4 (vacio -> .) ]

    possibly_next_matrix_row_value shift and go to state 59
    vacio                          shift and go to state 61

state 55

    (37) if_stmt -> IF ID LK single_stmt RK ELSE . LK single_stmt RK

    LK              shift and go to state 62


state 56

    (18) operator_term -> operator_term operator term .

    MAS             reduce using rule 18 (operator_term -> operator_term operator term .)
    MENOS           reduce using rule 18 (operator_term -> operator_term operator term .)
    MUL             reduce using rule 18 (operator_term -> operator_term operator term .)
    DIV             reduce using rule 18 (operator_term -> operator_term operator term .)
    IF              reduce using rule 18 (operator_term -> operator_term operator term .)
    ID              reduce using rule 18 (operator_term -> operator_term operator term .)
    PRINT           reduce using rule 18 (operator_term -> operator_term operator term .)
    INT             reduce using rule 18 (operator_term -> operator_term operator term .)
    MATRIX          reduce using rule 18 (operator_term -> operator_term operator term .)
    RK              reduce using rule 18 (operator_term -> operator_term operator term .)
    PC              reduce using rule 18 (operator_term -> operator_term operator term .)


state 57

    (20) sum_function -> SUM LP ID RP .

    MAS             reduce using rule 20 (sum_function -> SUM LP ID RP .)
    MENOS           reduce using rule 20 (sum_function -> SUM LP ID RP .)
    MUL             reduce using rule 20 (sum_function -> SUM LP ID RP .)
    DIV             reduce using rule 20 (sum_function -> SUM LP ID RP .)
    IF              reduce using rule 20 (sum_function -> SUM LP ID RP .)
    ID              reduce using rule 20 (sum_function -> SUM LP ID RP .)
    PRINT           reduce using rule 20 (sum_function -> SUM LP ID RP .)
    INT             reduce using rule 20 (sum_function -> SUM LP ID RP .)
    MATRIX          reduce using rule 20 (sum_function -> SUM LP ID RP .)
    RK              reduce using rule 20 (sum_function -> SUM LP ID RP .)
    PC              reduce using rule 20 (sum_function -> SUM LP ID RP .)


state 58

    (25) matrix_decl -> MATRIX ID IGUAL LC matrix_value RC . PC

    PC              shift and go to state 63


state 59

    (26) matrix_value -> DIGIT possibly_next_matrix_row_value . possibly_next_matrix_row
    (29) possibly_next_matrix_row -> . matrix_nextvalue possibly_next_matrix_row
    (30) possibly_next_matrix_row -> . vacio
    (31) matrix_nextvalue -> . BV matrix_value
    (32) matrix_nextvalue -> . vacio
    (4) vacio -> .

  ! shift/reduce conflict for BV resolved as shift
    BV              shift and go to state 67
    RC              reduce using rule 4 (vacio -> .)
    COMA            reduce using rule 4 (vacio -> .)

  ! BV              [ reduce using rule 4 (vacio -> .) ]

    possibly_next_matrix_row       shift and go to state 64
    matrix_nextvalue               shift and go to state 65
    vacio                          shift and go to state 66

state 60

    (27) possibly_next_matrix_row_value -> COMA . matrix_value possibly_next_matrix_row_value
    (26) matrix_value -> . DIGIT possibly_next_matrix_row_value possibly_next_matrix_row

    DIGIT           shift and go to state 54

    matrix_value                   shift and go to state 68

state 61

    (28) possibly_next_matrix_row_value -> vacio .

    BV              reduce using rule 28 (possibly_next_matrix_row_value -> vacio .)
    RC              reduce using rule 28 (possibly_next_matrix_row_value -> vacio .)
    COMA            reduce using rule 28 (possibly_next_matrix_row_value -> vacio .)


state 62

    (37) if_stmt -> IF ID LK single_stmt RK ELSE LK . single_stmt RK
    (9) single_stmt -> . decl
    (10) single_stmt -> . single_op
    (11) single_stmt -> . print
    (12) decl -> . int_decl
    (13) decl -> . matrix_decl
    (33) single_op -> . ID IGUAL term
    (34) print -> . PRINT LP ID RP
    (35) print -> . PRINT LP TEXT RP
    (14) int_decl -> . INT ID IGUAL term PC
    (25) matrix_decl -> . MATRIX ID IGUAL LC matrix_value RC PC

    ID              shift and go to state 13
    PRINT           shift and go to state 16
    INT             shift and go to state 17
    MATRIX          shift and go to state 18

    single_stmt                    shift and go to state 69
    decl                           shift and go to state 9
    single_op                      shift and go to state 10
    print                          shift and go to state 11
    int_decl                       shift and go to state 14
    matrix_decl                    shift and go to state 15

state 63

    (25) matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .

    IF              reduce using rule 25 (matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .)
    ID              reduce using rule 25 (matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .)
    PRINT           reduce using rule 25 (matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .)
    INT             reduce using rule 25 (matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .)
    MATRIX          reduce using rule 25 (matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .)
    RK              reduce using rule 25 (matrix_decl -> MATRIX ID IGUAL LC matrix_value RC PC .)


state 64

    (26) matrix_value -> DIGIT possibly_next_matrix_row_value possibly_next_matrix_row .

    RC              reduce using rule 26 (matrix_value -> DIGIT possibly_next_matrix_row_value possibly_next_matrix_row .)
    BV              reduce using rule 26 (matrix_value -> DIGIT possibly_next_matrix_row_value possibly_next_matrix_row .)
    COMA            reduce using rule 26 (matrix_value -> DIGIT possibly_next_matrix_row_value possibly_next_matrix_row .)


state 65

    (29) possibly_next_matrix_row -> matrix_nextvalue . possibly_next_matrix_row
    (29) possibly_next_matrix_row -> . matrix_nextvalue possibly_next_matrix_row
    (30) possibly_next_matrix_row -> . vacio
    (31) matrix_nextvalue -> . BV matrix_value
    (32) matrix_nextvalue -> . vacio
    (4) vacio -> .

  ! shift/reduce conflict for BV resolved as shift
    BV              shift and go to state 67
    RC              reduce using rule 4 (vacio -> .)
    COMA            reduce using rule 4 (vacio -> .)

  ! BV              [ reduce using rule 4 (vacio -> .) ]

    matrix_nextvalue               shift and go to state 65
    possibly_next_matrix_row       shift and go to state 70
    vacio                          shift and go to state 66

state 66

    (30) possibly_next_matrix_row -> vacio .
    (32) matrix_nextvalue -> vacio .

  ! reduce/reduce conflict for BV resolved using rule 30 (possibly_next_matrix_row -> vacio .)
  ! reduce/reduce conflict for RC resolved using rule 30 (possibly_next_matrix_row -> vacio .)
  ! reduce/reduce conflict for COMA resolved using rule 30 (possibly_next_matrix_row -> vacio .)
    BV              reduce using rule 30 (possibly_next_matrix_row -> vacio .)
    RC              reduce using rule 30 (possibly_next_matrix_row -> vacio .)
    COMA            reduce using rule 30 (possibly_next_matrix_row -> vacio .)

  ! BV              [ reduce using rule 32 (matrix_nextvalue -> vacio .) ]
  ! RC              [ reduce using rule 32 (matrix_nextvalue -> vacio .) ]
  ! COMA            [ reduce using rule 32 (matrix_nextvalue -> vacio .) ]


state 67

    (31) matrix_nextvalue -> BV . matrix_value
    (26) matrix_value -> . DIGIT possibly_next_matrix_row_value possibly_next_matrix_row

    DIGIT           shift and go to state 54

    matrix_value                   shift and go to state 71

state 68

    (27) possibly_next_matrix_row_value -> COMA matrix_value . possibly_next_matrix_row_value
    (27) possibly_next_matrix_row_value -> . COMA matrix_value possibly_next_matrix_row_value
    (28) possibly_next_matrix_row_value -> . vacio
    (4) vacio -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 60
    BV              reduce using rule 4 (vacio -> .)
    RC              reduce using rule 4 (vacio -> .)

  ! COMA            [ reduce using rule 4 (vacio -> .) ]

    possibly_next_matrix_row_value shift and go to state 72
    vacio                          shift and go to state 61

state 69

    (37) if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt . RK

    RK              shift and go to state 73


state 70

    (29) possibly_next_matrix_row -> matrix_nextvalue possibly_next_matrix_row .

    BV              reduce using rule 29 (possibly_next_matrix_row -> matrix_nextvalue possibly_next_matrix_row .)
    RC              reduce using rule 29 (possibly_next_matrix_row -> matrix_nextvalue possibly_next_matrix_row .)
    COMA            reduce using rule 29 (possibly_next_matrix_row -> matrix_nextvalue possibly_next_matrix_row .)


state 71

    (31) matrix_nextvalue -> BV matrix_value .

    BV              reduce using rule 31 (matrix_nextvalue -> BV matrix_value .)
    RC              reduce using rule 31 (matrix_nextvalue -> BV matrix_value .)
    COMA            reduce using rule 31 (matrix_nextvalue -> BV matrix_value .)


state 72

    (27) possibly_next_matrix_row_value -> COMA matrix_value possibly_next_matrix_row_value .

    BV              reduce using rule 27 (possibly_next_matrix_row_value -> COMA matrix_value possibly_next_matrix_row_value .)
    RC              reduce using rule 27 (possibly_next_matrix_row_value -> COMA matrix_value possibly_next_matrix_row_value .)
    COMA            reduce using rule 27 (possibly_next_matrix_row_value -> COMA matrix_value possibly_next_matrix_row_value .)


state 73

    (37) if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .

    IF              reduce using rule 37 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    ID              reduce using rule 37 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    PRINT           reduce using rule 37 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    INT             reduce using rule 37 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    MATRIX          reduce using rule 37 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)
    RK              reduce using rule 37 (if_stmt -> IF ID LK single_stmt RK ELSE LK single_stmt RK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 38 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 38 resolved as shift
WARNING: shift/reduce conflict for MUL in state 38 resolved as shift
WARNING: shift/reduce conflict for DIV in state 38 resolved as shift
WARNING: shift/reduce conflict for COMA in state 54 resolved as shift
WARNING: shift/reduce conflict for BV in state 59 resolved as shift
WARNING: shift/reduce conflict for BV in state 65 resolved as shift
WARNING: shift/reduce conflict for COMA in state 68 resolved as shift
WARNING: reduce/reduce conflict in state 66 resolved using rule (possibly_next_matrix_row -> vacio)
WARNING: rejected rule (matrix_nextvalue -> vacio) in state 66
WARNING: Rule (matrix_nextvalue -> vacio) is never reduced
